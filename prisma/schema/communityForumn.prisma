model Community {
  id          String                @id @default(cuid())
  description String
  visibility  CommunityVisibility   @default(PUBLIC)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  avatarUrl   String?
  bannerUrl   String?
  name        String                @unique
  ownerId     String
  slug        String?               @unique
  forumCount  Int                   @default(0)
  memberCount Int                   @default(0)
  postCount   Int                   @default(0)
  isDeleted   Boolean               @default(false)
  owner       users                 @relation("CommunityOwner", fields: [ownerId], references: [id])
  invitations CommunityInvitation[]
  members     CommunityMember[]
  posts       CommunityPost[]
  forums      Forum[]               @relation("CommunityForums")

  @@index([slug])
  @@index([ownerId])
}

model CommunityMember {
  id          String           @id @default(cuid())
  communityId String
  status      MembershipStatus @default(MEMBER)
  joinedAt    DateTime         @default(now())
  role        String           @default("MEMBER")
  usersId     String
  community   Community        @relation(fields: [communityId], references: [id])
  users       users            @relation(fields: [usersId], references: [id])

  @@unique([communityId, usersId])
  @@index([usersId])
  @@index([status])
}

model CommunityInvitation {
  id          String    @id @default(cuid())
  communityId String
  code        String    @unique
  maxUses     Int?      @default(1)
  uses        Int       @default(0)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id])

  @@index([code])
}

model Forum {
  id          String             @id @default(cuid())
  communityId String
  name        String
  description String?
  order       Int                @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  postCount   Int                @default(0)
  threadCount Int                @default(0)
  isDeleted   Boolean            @default(false)
  imageUrl    String[]
  ownerId     String
  threads     DiscussionThread[]
  community   Community          @relation("CommunityForums", fields: [communityId], references: [id])
  owner       users              @relation("ForumOwner", fields: [ownerId], references: [id])
  categories  ForumCategory[]
  ForumMember ForumMember[]

  @@index([communityId])
}

model ForumMember {
  id       String           @id @default(cuid())
  forumId  String
  usersId  String
  role     String           @default("MEMBER")
  status   MembershipStatus @default(MEMBER)
  joinedAt DateTime         @default(now())
  forum    Forum            @relation(fields: [forumId], references: [id])
  users    users            @relation(fields: [usersId], references: [id])

  @@unique([forumId, usersId])
  @@index([usersId])
  @@index([status])
}

model ForumCategory {
  id          String          @id @default(cuid())
  forumId     String
  name        String
  slug        String
  description String?
  order       Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  postCount   Int             @default(0)
  posts       CommunityPost[]
  forum       Forum           @relation(fields: [forumId], references: [id])

  @@index([slug])
  @@index([forumId])
}

model CommunityPost {
  id            String               @id @default(cuid())
  title         String
  tags          String[]
  content       String
  likesCount    Int                  @default(0)
  viewsCount    Int                  @default(0)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  authorId      String
  commentsCount Int                  @default(0)
  locked        Boolean              @default(false)
  pinned        Boolean              @default(false)
  categoryId    String?
  engagement    Float                @default(0)
  sharesCount   Int                  @default(0)
  communityId   String?
  isDeleted     Boolean              @default(false)
  videoUrl      String[]
  imageUrl      String[]
  comments      Comment[]
  author        users                @relation(fields: [authorId], references: [id])
  category      ForumCategory?       @relation(fields: [categoryId], references: [id])
  community     Community?           @relation(fields: [communityId], references: [id])
  likes         CommunityPostLike[]
  poll          CommunityPostPoll?
  shares        CommunityPostShare[]
  views         CommunityPostView[]

  @@index([categoryId])
  @@index([authorId])
  @@index([createdAt])
}

model CommunityPostPoll {
  id        String                    @id @default(cuid())
  postId    String                    @unique
  question  String
  expiresAt DateTime?
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  post      CommunityPost             @relation(fields: [postId], references: [id])
  options   CommunityPostPollOption[]

  @@index([postId])
}

model CommunityPostPollOption {
  id      String                  @id @default(cuid())
  pollId  String
  option  String
  votes   Int                     @default(0)
  poll    CommunityPostPoll       @relation(fields: [pollId], references: [id])
  votesBy CommunityPostPollVote[]

  @@index([pollId])
}

model CommunityPostPollVote {
  id       String                  @id @default(cuid())
  userId   String
  optionId String
  option   CommunityPostPollOption @relation(fields: [optionId], references: [id])
  user     users                   @relation(fields: [userId], references: [id])

  @@unique([userId, optionId])
}

model CommunityPostLike {
  id        String        @id @default(cuid())
  postId    String
  createdAt DateTime      @default(now())
  usersId   String
  post      CommunityPost @relation(fields: [postId], references: [id])
  users     users         @relation(fields: [usersId], references: [id])

  @@unique([postId, usersId])
}

model CommunityPostView {
  id         String        @id @default(cuid())
  postId     String
  ipAddress  String?
  createdAt  DateTime      @default(now())
  usersAgent String?
  usersId    String?
  post       CommunityPost @relation(fields: [postId], references: [id])
  users      users?        @relation(fields: [usersId], references: [id])

  @@unique([postId, usersId])
  @@index([postId])
}

model CommunityPostShare {
  id       String        @id @default(cuid())
  postId   String
  usersId  String
  platform String?
  sharedAt DateTime      @default(now())
  post     CommunityPost @relation(fields: [postId], references: [id])
  users    users         @relation(fields: [usersId], references: [id])

  @@index([postId])
  @@index([usersId])
}

model Comment {
  id              String        @id @default(cuid())
  postId          String
  authorId        String
  content         String
  parentCommentId String?
  depth           Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isDeleted       Boolean       @default(false)
  author          users         @relation(fields: [authorId], references: [id])
  parentComment   Comment?      @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[]     @relation("CommentReplies")
  post            CommunityPost @relation(fields: [postId], references: [id])
  likes           CommentLike[]

  @@index([postId])
  @@index([authorId])
  @@index([parentCommentId])
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  createdAt DateTime @default(now())
  isLike    Boolean
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  users     users    @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
}

model DiscussionThread {
  id              String                @id @default(cuid())
  forumId         String
  authorId        String
  title           String
  content         String
  tags            String[]
  pinned          Boolean               @default(false)
  locked          Boolean               @default(false)
  viewsCount      Int                   @default(0)
  commentsCount   Int                   @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  isDeleted       Boolean               @default(false)
  imageUrl        String[]
  likesCount      Int                   @default(0)
  comments        DiscussionComment[]
  author          users                 @relation(fields: [authorId], references: [id])
  forum           Forum                 @relation(fields: [forumId], references: [id])
  poll            DiscussionThreadPoll?
  ForumThreadLike ForumThreadLike[]
  ForumThreadPin  ForumThreadPin[]

  @@index([forumId])
  @@index([authorId])
}

model ForumThreadPin {
  id       String           @id @default(cuid())
  threadId String
  usersId  String
  pinnedAt DateTime         @default(now())
  thread   DiscussionThread @relation(fields: [threadId], references: [id])
  users    users            @relation(fields: [usersId], references: [id])

  @@unique([threadId, usersId])
}

model ForumThreadLike {
  id        String           @id @default(cuid())
  threadId  String
  usersId   String
  createdAt DateTime         @default(now())
  thread    DiscussionThread @relation(fields: [threadId], references: [id])
  users     users            @relation(fields: [usersId], references: [id])

  @@unique([threadId, usersId])
}

model DiscussionThreadPoll {
  id        String                       @id @default(cuid())
  threadId  String                       @unique
  question  String
  expiresAt DateTime?
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
  thread    DiscussionThread             @relation(fields: [threadId], references: [id])
  options   DiscussionThreadPollOption[]

  @@index([threadId])
}

model DiscussionThreadPollOption {
  id      String                     @id @default(cuid())
  pollId  String
  option  String
  votes   Int                        @default(0)
  poll    DiscussionThreadPoll       @relation(fields: [pollId], references: [id])
  votesBy DiscussionThreadPollVote[]

  @@index([pollId])
}

model DiscussionThreadPollVote {
  id       String                     @id @default(cuid())
  userId   String
  optionId String
  option   DiscussionThreadPollOption @relation(fields: [optionId], references: [id])
  user     users                      @relation(fields: [userId], references: [id])

  @@unique([userId, optionId])
}

model DiscussionComment {
  id                     String                   @id @default(cuid())
  threadId               String
  authorId               String
  content                String
  parentCommentId        String?
  depth                  Int                      @default(0)
  likesCount             Int                      @default(0)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  shareCount             Int                      @default(0)
  author                 users                    @relation(fields: [authorId], references: [id])
  parentComment          DiscussionComment?       @relation("DiscussionCommentReplies", fields: [parentCommentId], references: [id])
  replies                DiscussionComment[]      @relation("DiscussionCommentReplies")
  thread                 DiscussionThread         @relation(fields: [threadId], references: [id])
  likes                  DiscussionCommentLike[]
  discussionCommentShare DiscussionCommentShare[]

  @@index([threadId])
  @@index([authorId])
  @@index([parentCommentId])
}

model DiscussionCommentLike {
  id        String            @id @default(cuid())
  commentId String
  usersId   String
  createdAt DateTime          @default(now())
  comment   DiscussionComment @relation(fields: [commentId], references: [id])
  users     users             @relation(fields: [usersId], references: [id])

  @@unique([commentId, usersId])
}

model DiscussionCommentShare {
  id        String            @id @default(cuid())
  commentId String
  usersId   String
  createdAt DateTime          @default(now())
  comment   DiscussionComment @relation(fields: [commentId], references: [id])
  users     users             @relation(fields: [usersId], references: [id])

  @@unique([commentId, usersId])
}

enum CommunityVisibility {
  PUBLIC
  PRIVATE
}

enum MembershipStatus {
  INVITED
  MEMBER
  REJECTED
  PENDING
  BANNED
}
