model applicationInvites {
  id                     String                  @id @default(cuid())
  isDeleted              Boolean                 @default(false)
  applicationFee         YesNo?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  scheduleDate           DateTime?
  reScheduleDate         DateTime?
  response               InvitedResponse         @default(PENDING)
  responseStepsCompleted InvitedResponse[]
  propertiesId           String?
  invitedByLandordId     String?
  tenantsId              String?
  userInvitedId          String?
  enquiryId              String?
  roomId                 String?
  unitId                 String?
  propertyListingId      String?
  application            application?
  enquires               Log?                    @relation(fields: [enquiryId], references: [id])
  landlords              landlords?              @relation(fields: [invitedByLandordId], references: [id])
  properties             properties?             @relation(fields: [propertiesId], references: [id])
  propertyListing        propertyListingHistory? @relation(fields: [propertyListingId], references: [id])
  rooms                  RoomDetail?             @relation(fields: [roomId], references: [id])
  tenants                tenants?                @relation(fields: [tenantsId], references: [id])
  units                  UnitConfiguration?      @relation(fields: [unitId], references: [id])
  userInvited            users?                  @relation(fields: [userInvitedId], references: [id])
}

model AgreementDocument {
  id                 String           @id @default(cuid())
  processedContent   String?
  metadata           Json?
  sentAt             DateTime?
  signedByTenantAt   DateTime?
  signedByLandlordAt DateTime?
  completedAt        DateTime?
  applicationId      String
  templateId         String
  templateVersion    Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  createdBy          String
  documentUrl        String[]
  agreementStatus    AgreementStatus?
  variables          String[]
  application        application      @relation(fields: [applicationId], references: [id])
  documentTemplate   DocuTemplate     @relation(fields: [templateId], references: [id])
}

model LeaseRenewal {
  id           String        @id @default(cuid())
  tenantId     String
  propertyId   String
  currentRent  Decimal       @db.Decimal(10, 2)
  proposedRent Decimal       @db.Decimal(10, 2)
  renewalTerms Json
  status       RenewalStatus @default(PENDING)
  message      String?
  proposedBy   String
  proposedAt   DateTime      @default(now())
  respondedBy  String?
  respondedAt  DateTime?
  counterOffer Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  property     properties    @relation(fields: [propertyId], references: [id])
  tenant       tenants       @relation(fields: [tenantId], references: [id])

  @@index([tenantId, status])
  @@index([propertyId, status])
}

model application {
  id                           String                   @id @default(cuid())
  completedSteps               ApplicationSaveState[]
  lastStep                     ApplicationSaveState?    @default(PERSONAL_KIN)
  leaseStartDate               DateTime?
  leaseEndDate                 DateTime?
  propertyType                 String?
  moveInDate                   DateTime?
  rentAmountPaid               Decimal?
  securityDeposit              Decimal?
  leaseTerm                    String?
  status                       ApplicationStatus        @default(PENDING)
  statuesCompleted             ApplicationStatus[]
  invited                      InvitedStatus?           @default(NO)
  stepCompleted                Int?                     @default(1)
  isDeleted                    Boolean                  @default(false)
  createdAt                    DateTime                 @default(now())
  updatedAt                    DateTime                 @updatedAt
  userId                       String?
  residentialId                String?
  emergencyContactId           String?
  employmentInformationId      String?
  propertiesId                 String?
  applicantPersonalDetailsId   String
  guarantorInformationId       String?
  refereeId                    String?
  createdById                  String?
  updatedById                  String?
  applicationInviteId          String?                  @unique
  employmentVerificationStatus YesNo?
  incomeVerificationStatus     YesNo?
  creditCheckStatus            YesNo?
  landlordVerificationStatus   YesNo?
  guarantorVerificationStatus  YesNo?
  refereeVerificationStatus    YesNo?
  roomId                       String?
  unitId                       String?
  agreementDocument            AgreementDocument[]
  employeeReference            EmployeeReferenceForm?
  guarantorAgreement           GuarantorAgreement?
  referenceForm                LandlordReferenceForm?
  Log                          Log[]                    @relation("apply")
  personalDetails              applicantPersonalDetails @relation(fields: [applicantPersonalDetailsId], references: [id])
  applicationInvites           applicationInvites?      @relation(fields: [applicationInviteId], references: [id])
  createdBy                    users?                   @relation("createdBy", fields: [createdById], references: [id])
  emergencyInfo                emergencyContact?        @relation(fields: [emergencyContactId], references: [id])
  employmentInfo               EmploymentInformation?   @relation(fields: [employmentInformationId], references: [id])
  guarantorInformation         guarantorInformation?    @relation(fields: [guarantorInformationId], references: [id])
  properties                   properties?              @relation(fields: [propertiesId], references: [id])
  referee                      referees?                @relation("referee", fields: [refereeId], references: [id])
  residentialInfo              residentialInformation?  @relation(fields: [residentialId], references: [id])
  rooms                        RoomDetail?              @relation(fields: [roomId], references: [id])
  units                        UnitConfiguration?       @relation(fields: [unitId], references: [id])
  updatedBy                    users?                   @relation("updatedBy", fields: [updatedById], references: [id])
  user                         users?                   @relation("ApplicationUser", fields: [userId], references: [id])
  applicationQuestions         applicationQuestions[]
  declaration                  declaration[]
  documents                    propertyDocument[]
  tenant                       tenants?                 @relation("ApplicationTenant")
  users                        users[]                  @relation("applicationTousers")
}

model applicantPersonalDetails {
  id                 String        @id @default(cuid())
  title              String
  firstName          String
  middleName         String?
  lastName           String
  dob                DateTime
  email              String?       @unique
  phoneNumber        String
  maritalStatus      String
  nationality        String?
  identificationType String?
  identificationNo   String?
  issuingAuthority   String?
  expiryDate         DateTime
  userId             String?
  user               users?        @relation(fields: [userId], references: [id])
  application        application[]
  nextOfKin          nextOfKin?
}

model nextOfKin {
  id                         String                    @id @default(cuid())
  lastName                   String
  relationship               String
  email                      String
  firstName                  String
  phoneNumber                String
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  middleName                 String?
  applicantPersonalDetailsId String?                   @unique
  userId                     String
  applicantPersonalDetails   applicantPersonalDetails? @relation(fields: [applicantPersonalDetailsId], references: [id])
  user                       users                     @relation(fields: [userId], references: [id])
}

model PrevAddress {
  id                       String                  @id @default(cuid())
  address                  String
  lengthOfResidence        String
  residentialInformationId String?
  residentialInformation   residentialInformation? @relation(fields: [residentialInformationId], references: [id])
}

model residentialInformation {
  id                          String        @id @default(cuid())
  address                     String
  addressStatus               String
  city                        String?
  state                       String?
  country                     String?
  zipCode                     String?
  lengthOfResidence           String
  reasonForLeaving            String?
  landlordOrAgencyPhoneNumber String
  landlordOrAgencyEmail       String
  landlordOrAgencyName        String
  userId                      String?
  prevAddresses               PrevAddress[]
  application                 application[]
  user                        users?        @relation(fields: [userId], references: [id])
}

model guarantorInformation {
  id                      String              @id @default(cuid())
  fullName                String
  phoneNumber             String
  email                   String
  address                 String
  relationship            String?
  identificationType      String?
  identificationNo        String?
  monthlyIncome           String?
  employerName            String?
  userId                  String?
  dateOfBirth             DateTime?
  nationalInsuranceNumber String?
  title                   String?
  guarantorAgreement      GuarantorAgreement?
  application             application[]
  user                    users?              @relation(fields: [userId], references: [id])
}

model emergencyContact {
  id          String        @id @default(cuid())
  fullname    String
  phoneNumber String
  email       String
  address     String
  userId      String?
  application application[]
  user        users?        @relation(fields: [userId], references: [id])
}

model referees {
  id                        String        @id @default(cuid())
  professionalReferenceName String
  personalReferenceName     String
  personalEmail             String
  professionalEmail         String
  personalPhoneNumber       String
  professionalPhoneNumber   String
  personalRelationship      String
  professionalRelationship  String
  userId                    String?
  application               application[] @relation("referee")
  user                      users?        @relation(fields: [userId], references: [id])
}

model EmploymentInformation {
  id                   String        @id @default(cuid())
  employmentStatus     String
  taxCredit            String?
  startDate            DateTime?
  zipCode              String?
  address              String?
  city                 String?
  state                String?
  country              String?
  monthlyOrAnualIncome String?
  childBenefit         String?
  childMaintenance     String?
  disabilityBenefit    String?
  housingBenefit       String?
  others               String?
  pension              String?
  moreDetails          String?
  employerCompany      String?
  employerEmail        String?
  employerPhone        String?
  positionTitle        String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  userId               String?
  user                 users?        @relation(fields: [userId], references: [id])
  application          application[]
}

model applicationQuestions {
  id                    String       @id @default(cuid())
  havePet               AnswersEnum? @default(NO)
  youSmoke              AnswersEnum? @default(NO)
  requireParking        AnswersEnum? @default(NO)
  haveOutstandingDebts  AnswersEnum? @default(NO)
  additionalOccupants   String?
  additionalInformation String?
  applicantId           String
  application           application  @relation(fields: [applicantId], references: [id])
}

model declaration {
  id              String       @id @default(cuid())
  signature       String?
  declaration     String
  additionalNotes String?
  date            DateTime
  applicantId     String?
  application     application? @relation(fields: [applicantId], references: [id])
}

enum ApplicationStatus {
  PENDING
  DECLINED
  SUBMITTED
  COMPLETED
  AGREEMENTS
  AGREEMENTS_SIGNED
  LANDLORD_REFERENCE
  GUARANTOR_REFERENCE
  EMPLOYEE_REFERENCE
  APPROVED
  APPLICATION_FEE_PAID
  MAKEPAYMENT
  PAYMENT_COMPLETED
  PAYMENT_PARTIALLY_COMPLETED
  ACCEPTED
  TENANT_CREATED
}

enum AnswersEnum {
  YES
  NO
}

enum InvitedResponse {
  PENDING
  RESCHEDULED
  SCHEDULED
  RESCHEDULED_ACCEPTED
  RE_INVITED
  VISITED
  NOT_VISITED
  REJECTED
  ACCEPTED
  AWAITING_FEEDBACK
  FEEDBACK
  COMPLETED
  CANCELLED
  APPLY
  APPLICATION_STARTED
  APPLICATION_NOT_STARTED
  SUBMITTED
  DECLINED
  APPROVED
  TENANT_CREATED
  AGREEMENTS
}

enum InvitedStatus {
  YES
  NO
}

enum ApplicationSaveState {
  PERSONAL_KIN
  REFEREE
  EMPLOYMENT
  EMERGENCY_CONTACT
  RESIDENTIAL_ADDRESS
  DOCUMENT_UPLOAD
  ADDITIONAL_INFO
  GUARANTOR_INFO
  DECLARATION
}

enum AgreementStatus {
  SIGNED_BY_TENANT
  SIGNED_BY_LANDLORD
  PENDING
  COMPLETED
}

enum RenewalStatus {
  PENDING
  ACCEPTED
  REJECTED
  COUNTER_OFFER
  EXPIRED
}
