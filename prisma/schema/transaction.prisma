enum TransactionReference {
  FUND_WALLET
  WITHDRAWAL
  MAKE_PAYMENT
  RECEIVE_PAYMENT
  RENT_DUE
  RENT_PAYMENT
  MAINTENANCE_FEE
  LANDLORD_PAYOUT
  BILL_PAYMENT
  LATE_FEE
  CHARGES
  SUPPLIES
  EQUIPMENTS
  TRANSFER
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  RENT_RENEWED
}

enum PaymentGateway {
  STRIPE
  FLUTTERWAVE
  PAYSTACK
}

enum PaymentFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  QUARTERLY
  ANNUALLY
  PER_SQFT
}

model Transaction {
  id                        String               @id @default(cuid())
  description               String?
  amount                    Decimal              @db.Decimal(18, 2)
  userId                    String
  user                      users                @relation(fields: [userId], references: [id])
  walletId                  String?
  wallet                    wallet?              @relation(fields: [walletId], references: [id])
  type                      TransactionType
  reference                 TransactionReference
  status                    TransactionStatus
  referenceId               String               @unique
  paymentGateway            PaymentGateway?
  stripePaymentIntentId     String?              @unique
  propertyId                String?
  property                  properties?          @relation(fields: [propertyId], references: [id])
  unitId                    String?
  unit                      UnitConfiguration?   @relation(fields: [unitId], references: [id])
  roomId                    String?
  room                      RoomDetail?          @relation(fields: [roomId], references: [id])
  billId                    String?
  bill                      bills?               @relation(fields: [billId], references: [id])
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  currency                  String?
  isDue                     Boolean?             @default(false)
  Ads                       Ads[]
  securityDepositPercentage Int?
  Log                       Log[]                @relation("transactions")
  metadata                  Json?
}

model tenantPaymentHistory {
  id            String    @id @default(cuid())
  rentStartDate DateTime? @db.Timestamptz(6)
  rentEndDate   DateTime? @db.Timestamptz(6)

  expectedRentAmount Decimal? @db.Decimal(18, 2)
  amountPaid         Decimal? @db.Decimal(18, 2)

  // relationships feilds
  tenantId String?
  tenant   tenants? @relation(fields: [tenantId], references: [id])
}

enum PayableBy {
  LANDLORD
  TENANT
}

model bills {
  id            String           @id @default(cuid())
  billId        String           @unique
  billName      String
  billCategory  String
  description   String
  amount        Decimal          @db.Decimal(18, 2)
  billFrequency PaymentFrequency
  dueDate       DateTime
  payableBy     PayableBy?       @default(LANDLORD)
  propertyId    String?
  property      properties?      @relation(fields: [propertyId], references: [id])
  landlordId    String?
  landlord      landlords?       @relation(fields: [landlordId], references: [id])
  tenantId      String?
  tenant        tenants?         @relation(fields: [tenantId], references: [id])
  transactions  Transaction[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  ResidentialProperty ResidentialProperty[]
}

// New Subscription model
model Subscription {
  id                   String    @id @default(cuid())
  stripeSubscriptionId String    @unique
  status               String
  userId               String
  user                 users     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  cancelledAt          DateTime?
}

model Budget {
  id              String               @id @default(cuid())
  propertyId      String
  transactionType TransactionReference
  budgetAmount    Float
  currentAmount   Float                @default(0)
  frequency       BudgetFrequency
  alertThreshold  Float                @default(0.8) // 80% threshold
  property        properties           @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BudgetFrequency {
  WEEKLY
  MONTHLY
  ANNUAL
}
