enum onlineStatus {
    online
    offline
}

model users {
    id         String  @id @default(cuid())
    email      String  @unique
    password   String?
    isVerified Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // user role definition default is webuser
    role userRoles[] @default([WEBUSER])

    onlineStatus onlineStatus? @default(offline)
    // foreign key and relational fields 
    VerificationToken      VerificationToken[]
    tenant                 tenants?
    landlords              landlords?
    community              Community[]
    communityPost          CommunityPost[]
    communityPostLikes     CommunityPostLikes[]
    communityPostViews     CommunityPostViews[]
    sentEmails             Email[]                  @relation("SentEmails") // Emails sent by this user
    receivedEmails         Email[]                  @relation("ReceivedEmails") // Emails received by this user
    applicantion           application[]
    agents                 agents[]
    Comments               Comments[]
    ratingsGiven           Rating[]                 @relation("ratedByUser")
    ratingsReceived        Rating[]                 @relation("userRated")
    messagesSent           Message[]                @relation("messagesSent")
    messagesReceived       Message[]                @relation("messagesReceived")
    chatRoomsUser1         ChatRoom[]               @relation("chatRoomsUser1")
    chatRoomsUser2         ChatRoom[]               @relation("chatRoomsUser2")
    profileId              String?                  @unique
    profile                profile?                 @relation(fields: [profileId], references: [id])
    residentialInformation residentialInformation[]
    CommunityMember        CommunityMember[]
    // maintenance            maintenance[]
    Ads                    Ads[]
    transactions           Transaction[]

    // maintenance maintenance[] @relation(name: "vendorUser")
    // tenantMaintenanceUser maintenance[]      @relation("tenantUser")
    // vendorMaintenaceUser  maintenance[]      @relation("vendorUser")
    creditScore              creditScore?
    // propertyDocument         propertyDocument[]
    reviews                  reviews[]
    Subscription             Subscription[]
    vendors                  vendors?
    stripeCustomerId         String?                    @unique
    wallet                   wallet[]
    nextOfKin                nextOfKin[]
    applicationCreatedBy     application[]              @relation("createdBy")
    applicationUpdatedBy     application[]              @relation("updatedBy")
    guarantorInformation     guarantorInformation[]
    emergencyContact         emergencyContact[]
    referees                 referees[]
    document                 propertyDocument[]
    EmploymentInformation    EmploymentInformation[]
    applicantPersonalDetails applicantPersonalDetails[]
    Complaint                Complaint[]
    Log                      Log[]                      @relation("users")
    violation                violation[]                @relation("users")
    UserLikedProperty        UserLikedProperty[]
    applicationInvites       applicationInvites[]

    application application[] @relation("ApplicationUser")
    Booking Booking[]
}

model UserLikedProperty {
    id         String      @id @default(cuid())
    userId     String?
    user       users?      @relation(fields: [userId], references: [id])
    propertyId String?
    property   properties? @relation(fields: [propertyId], references: [id])
    likedAt    DateTime    @default(now())

    @@unique([userId, propertyId])
}
