enum onlineStatus {
    online
    offline
}

model users {
    id         String  @id @default(cuid())
    email      String  @unique
    password   String?
    isVerified Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // user role definition default is webuser
    role userRoles[] @default([WEBUSER])

    onlineStatus           onlineStatus?            @default(offline)
    // foreign key and relational fields 
    VerificationToken      VerificationToken[]
    tenants                tenants[]                // ✅ 1 user → many tenants
    landlords              landlords?
    // community              Community[]
    communityPost          CommunityPost[]
    communityPostLikes     CommunityPostLike[]
    communityPostViews     CommunityPostView[]
    sentEmails             Email[]                  @relation("SentEmails") 
    receivedEmails         Email[]                  @relation("ReceivedEmails") 
    applicantion           application[]
    agents                 agents[]
    Comments               Comment[]
    ratingsGiven           Rating[]                 @relation("ratedByUser")
    ratingsReceived        Rating[]                 @relation("userRated")
    messagesSent           Message[]                @relation("messagesSent")
    messagesReceived       Message[]                @relation("messagesReceived")
    chatRoomsUser1         ChatRoom[]               @relation("chatRoomsUser1")
    chatRoomsUser2         ChatRoom[]               @relation("chatRoomsUser2")
    profileId              String?                  @unique
    profile                profile?                 @relation(fields: [profileId], references: [id])
    residentialInformation residentialInformation[]
    CommunityMember        CommunityMember[]
    Ads                    Ads[]
    transactions           Transaction[]
    creditScore            creditScore?
    reviews                reviews[]
    Subscription           Subscription[]
    vendors                vendors?
    stripeCustomerId       String?                  @unique
    wallet                 wallet[]
    nextOfKin              nextOfKin[]
    applicationCreatedBy   application[]            @relation("createdBy")
    applicationUpdatedBy   application[]            @relation("updatedBy")
    guarantorInformation   guarantorInformation[]
    emergencyContact       emergencyContact[]
    referees               referees[]
    document               propertyDocument[]
    EmploymentInformation  EmploymentInformation[]
    applicantPersonalDetails applicantPersonalDetails[]
    Complaint              Complaint[]
    Log                    Log[]                    @relation("users")
    violation              violation[]              @relation("users")
    UserLikedProperty      UserLikedProperty[]
    applicationInvites     applicationInvites[]
    application            application[]            @relation("ApplicationUser")
    Booking                Booking[]
    UserSearchPreference   UserSearchPreference[]
    assignedTemplates      UserDocuTemplate[]
    DocuTemplate           DocuTemplate[]
    DocuTemplateVersion    DocuTemplateVersion[]
    UserEmailState         UserEmailState[]
    Community              Community[] @relation("CommunityOwner")
    CommunityPostShare     CommunityPostShare[]
    CommentLike            CommentLike[]
    DiscussionThread       DiscussionThread[]
    DiscussionComment      DiscussionComment[]
    DiscussionCommentLike  DiscussionCommentLike[]
    CommunityPostPollVote  CommunityPostPollVote[]
    DiscussionThreadPollVote DiscussionThreadPollVote[]
    ForumMember            ForumMember[]
    BroadcastCategoryMembers BroadcastCategoryMembers[]
    ForumThreadLike        ForumThreadLike[]
    DiscussionCommentShare DiscussionCommentShare[]
    Forum                  Forum[] @relation("ForumOwner")
    ForumThreadPin         ForumThreadPin[]
    SupportTicketAssigned  SupportTicket[] @relation("TicketAssignedTo")
    ComplaintMessage       ComplaintMessage[]
    UserPreferences        UserPreferences[]
    NotificationPreference NotificationPreference[]
    Todo                   Todo[]
}

model UserLikedProperty {
    id         String      @id @default(cuid())
    userId     String?
    user       users?      @relation(fields: [userId], references: [id])
    propertyId String?
    property   properties? @relation(fields: [propertyId], references: [id])
    likedAt    DateTime    @default(now())

    @@unique([userId, propertyId])
}

model UserSearchPreference {
    id          String         @id @default(cuid())
    description String?        @unique
    userId      String         @unique
    user        users          @relation(fields: [userId], references: [id])
    types       PropertyType[]
    isActive    Boolean        @default(true)
    updatedAt   DateTime       @updatedAt
    createdAt   DateTime       @default(now())
}
