// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum YesNo {
  YES
  NO
}

model Ads {
  id               String       @id @default(cuid())
  title            String
  description      String
  amountPaid       Decimal      @db.Decimal(18, 2)
  locations        String[]
  bussinessDetails Json
  contactInfo      String
  startedDate      DateTime
  endDate          DateTime
  attachment       String[]
  isListed         Boolean      @default(false)
  views            Int          @default(0)
  clicks           Int          @default(0)
  reach            Int          @default(0)
  userId           String
  user             users        @relation(fields: [userId], references: [id])
  referenceId      String?
  transaction      Transaction? @relation(fields: [referenceId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}



model bankInfo {
  id            String     @id @default(cuid())
  landlordId    String?
  landlords     landlords? @relation(fields: [landlordId], references: [id])
  vendorId      String?
  vendors       vendors?   @relation(fields: [vendorId], references: [id])
  bankName      String
  accountNumber String
  accountName   String
}

model agency {
  id         String       @id @default(cuid())
  name       String
  agents     agents[]
  properties properties[]
}

model agents {
  id         String      @id @default(cuid())
  agentId    String?
  about      String?
  facebook   String?
  twitter    String?
  instagram  String?
  linkedin   String?
  // date fields
  createdAt  DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime?   @default(now()) @db.Timestamptz(6)
  // agents relationships
  userId     String
  user       users       @relation(fields: [userId], references: [id])
  agencyId   String?
  agency     agency?     @relation(fields: [agencyId], references: [id])
  propertyId String?
  properties properties? @relation(fields: [propertyId], references: [id])
  tenant     tenants[]
}

model Rating {
  id          String  @id @default(cuid())
  ratingValue Int     @default(0) // a rating scale from 0 to 5
  comments    String? // Optional field for user comments

  propertyId String?
  property   properties? @relation(fields: [propertyId], references: [id])

  userId String?
  user   users?  @relation("userRated", fields: [userId], references: [id])

  ratedByUserId String
  ratedBy       users  @relation("ratedByUser", fields: [ratedByUserId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}




// user information definition 
// defining the user roles
enum userRoles {
  VENDOR
  LANDLORD
  TENANT
  WEBUSER
  AGENT
  ADMIN
}



model creditScore {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        users    @relation(fields: [userId], references: [id])
  score       Int
  lastUpdated DateTime @default(now())

  //NOTE: Factors that can possibly contribute to the score
  paymentHistory    Float
  rentalHistory     Float
  maintainanceScore Float
  reviewScore       Float
}



//  status will be in-progress, completed, assigned, aborted
model status {
  id        String  @id @default(cuid())
  name      String
  isDeleted Boolean @default(false)
  // maintenances maintenance[]
}


