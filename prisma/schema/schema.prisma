// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ads {
  id               String       @id @default(cuid())
  title            String
  description      String
  amountPaid       Decimal      @db.Decimal(18, 2)
  locations        String[]
  bussinessDetails Json
  contactInfo      String
  startedDate      DateTime
  endDate          DateTime
  attachment       String[]
  isListed         Boolean      @default(false)
  views            Int          @default(0)
  clicks           Int          @default(0)
  reach            Int          @default(0)
  userId           String
  user             users        @relation(fields: [userId], references: [id])
  referenceId      String?
  transaction      Transaction? @relation(fields: [referenceId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model landlords {
  id                    String                  @id @default(cuid())
  property              properties[]
  userId                String                  @unique
  user                  users                   @relation(fields: [userId], references: [id])
  landlordCode          String?                 @unique
  tenants               tenants[]
  lnadlordSupportTicket lnadlordSupportTicket[]
  bills                 bills[]
  reviews               reviews[]

  isDeleted            Boolean                @default(false)
  bankInfo             bankInfo[]
  maintenances         maintenance[]          @relation("landlordUser")
  maintenanceWhitelist maintenanceWhitelist[]
  stripeCustomerId     String?                @unique

  Broadcast             Broadcast[]
  globalSettings        Settings[]
  propsApartmentSetting propApartmentSettings[]
  applicationInvites    applicationInvites[]
  emailDomains          String?                 @unique
}

model bankInfo {
  id            String     @id @default(cuid())
  landlordId    String?
  landlords     landlords? @relation(fields: [landlordId], references: [id])
  vendorId      String?
  vendors       vendors?   @relation(fields: [vendorId], references: [id])
  bankName      String
  accountNumber String
  accountName   String
}

model agency {
  id         String       @id @default(cuid())
  name       String
  agents     agents[]
  properties properties[]
  // TODO:
}

model agents {
  id         String      @id @default(cuid())
  agentId    String?
  about      String?
  facebook   String?
  twitter    String?
  instagram  String?
  linkedin   String?
  // date fields
  createdAt  DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime?   @default(now()) @db.Timestamptz(6)
  // agents relationships
  userId     String
  user       users       @relation(fields: [userId], references: [id])
  agencyId   String?
  agency     agency?     @relation(fields: [agencyId], references: [id])
  propertyId String?
  properties properties? @relation(fields: [propertyId], references: [id])
  tenant     tenants[]
}

model Rating {
  id          String  @id @default(cuid())
  ratingValue Int     @default(0) // a rating scale from 0 to 5
  comments    String? // Optional field for user comments

  propertyId String?
  property   properties? @relation(fields: [propertyId], references: [id])

  userId String?
  user   users?  @relation("userRated", fields: [userId], references: [id])

  ratedByUserId String
  ratedBy       users  @relation("ratedByUser", fields: [ratedByUserId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model vendors {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String?
  user         users?        @relation(fields: [userId], references: [id])
  services     services[]
  reviews      reviews[]
  bankInfo     bankInfo[]
  maintenances maintenance[] @relation("vendorUser")

  @@unique([userId])
}

model tenants {
  id                           String                         @id @default(cuid())
  tenantId                     String?                        @unique
  landlordId                   String
  tenantCode                   String?                        @unique
  // rentstatus String?
  rentstatus                   Int?
  leaseStartDate               DateTime?
  leaseEndDate                 DateTime?
  isCurrentLease               Boolean                        @default(true)
  // isexisted                    Int?
  dateOfFirstRent              DateTime?                      @default(now()) @db.Timestamptz(6)
  apartmentOrFlatNumber        Int?
  stripeCustomerId             String?                        @unique
  // tenantwebUserEmail
  tenantWebUserEmail           String?
  // relationships definitions
  userId                       String
  user                         users                          @relation(fields: [userId], references: [id])
  landlord                     landlords                      @relation(fields: [landlordId], references: [id])
  agentId                      String?
  agent                        agents?                        @relation(fields: [agentId], references: [id])
  propertyId                   String
  property                     properties                     @relation(fields: [propertyId], references: [id])
  history                      tenantPaymentHistory[]
  appartmentTransactionHistory appartmentTransactionHistory[]
  apartments                   apartments[]
  tenantSupportTicket          tenantSupportTicket[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  reviews   reviews[]
  services  services[]

  maintenances       maintenance[]        @relation("tenantUser")
  bills              bills[]
  applicationInvites applicationInvites[]

  @@unique([userId, propertyId])
  @@unique([userId])
}

// user information definition 
// defining the user roles
enum userRoles {
  VENDOR
  LANDLORD
  TENANT
  WEBUSER
  AGENT
  ADMIN
}

model users {
  id         String  @id @default(cuid())
  email      String  @unique
  password   String?
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user role definition default is webuser
  role userRoles[] @default([WEBUSER])

  // foreign key and relational fields 
  VerificationToken      VerificationToken[]
  tenant                 tenants?
  landlords              landlords?
  community              Community[]
  communityPost          CommunityPost[]
  communityPostLikes     CommunityPostLikes[]
  communityPostViews     CommunityPostViews[]
  sentEmails             Email[]                  @relation("SentEmails")
  RecievedEmails         Email[]                  @relation("RecievedEmails")
  applicantion           application[]
  tenantApplications     application[]            @relation("TenantApplications") // Applications where the user is a tenant
  agents                 agents[]
  Comments               Comments[]
  ratingsGiven           Rating[]                 @relation("ratedByUser")
  ratingsReceived        Rating[]                 @relation("userRated")
  messagesSent           Message[]                @relation("messagesSent")
  messagesReceived       Message[]                @relation("messagesReceived")
  chatRoomsUser1         ChatRoom[]               @relation("chatRoomsUser1")
  chatRoomsUser2         ChatRoom[]               @relation("chatRoomsUser2")
  profileId              String?                  @unique
  profile                profile?                 @relation(fields: [profileId], references: [id])
  residentialInformation residentialInformation[]
  CommunityMember        CommunityMember[]
  // maintenance            maintenance[]
  Ads                    Ads[]
  transactions           Transaction[]

  // maintenance maintenance[] @relation(name: "vendorUser")
  // tenantMaintenanceUser maintenance[]      @relation("tenantUser")
  // vendorMaintenaceUser  maintenance[]      @relation("vendorUser")
  creditScore      creditScore?
  propertyDocument propertyDocument[]
  reviews          reviews[]
  Subscription     Subscription[]
  vendors          vendors?
  stripeCustomerId String?            @unique
  wallet           wallet[]

  nextOfKin nextOfKin[]

  applicationCreatedBy application[] @relation("createdBy")

  applicationUpdatedBy application[] @relation("updatedBy")

  guarantorInformation guarantorInformation[]

  emergencyContact emergencyContact[]

  referees referees[]

  document document[]

  EmploymentInformation EmploymentInformation[]

  applicantPersonalDetails applicantPersonalDetails[]

  Complaint Complaint[]

  Log Log[] @relation("users")
}

model creditScore {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        users    @relation(fields: [userId], references: [id])
  score       Int
  lastUpdated DateTime @default(now())

  //NOTE: Factors that can possibly contribute to the score
  paymentHistory    Float
  rentalHistory     Float
  maintainanceScore Float
  reviewScore       Float
}

model VerificationToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    String
  user      users     @relation(fields: [userId], references: [id])
  expiresAt DateTime?
  createdAt DateTime  @default(now())
}

model Email {
  id               String   @id @default(cuid())
  senderEmail      String
  recieverEmail    String
  subject          String
  body             String
  attachment       String[]
  isReadBySender   Boolean  @default(true)
  isReadByReciever Boolean  @default(false)
  isDraft          Boolean  @default(true)
  isSent           Boolean  @default(false)
  createdAt        DateTime @default(now())
  sender           users    @relation("SentEmails", fields: [senderEmail], references: [email])
  reciver          users    @relation("RecievedEmails", fields: [recieverEmail], references: [email])
}

//  status will be in-progress, completed, assigned, aborted
model status {
  id        String  @id @default(cuid())
  name      String
  isDeleted Boolean @default(false)
  // maintenances maintenance[]
}
