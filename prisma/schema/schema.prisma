generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ads {
  id               String       @id @default(cuid())
  title            String
  description      String
  amountPaid       Decimal      @db.Decimal(18, 2)
  locations        String[]
  bussinessDetails Json
  contactInfo      String
  startedDate      DateTime
  endDate          DateTime
  attachment       String[]
  isListed         Boolean      @default(false)
  views            Int          @default(0)
  clicks           Int          @default(0)
  reach            Int          @default(0)
  userId           String
  referenceId      String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  transaction      Transaction? @relation(fields: [referenceId], references: [id])
  user             users        @relation(fields: [userId], references: [id])
}

model bankInfo {
  id            String     @id @default(cuid())
  landlordId    String?
  vendorId      String?
  bankName      String
  accountNumber String
  accountName   String
  landlords     landlords? @relation(fields: [landlordId], references: [id])
  vendors       vendors?   @relation(fields: [vendorId], references: [id])
}

model agency {
  id         String       @id @default(cuid())
  name       String
  agents     agents[]
  properties properties[]
}

model agents {
  id         String      @id @default(cuid())
  agentId    String?
  about      String?
  facebook   String?
  twitter    String?
  instagram  String?
  linkedin   String?
  createdAt  DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime?   @default(now()) @db.Timestamptz(6)
  userId     String
  agencyId   String?
  propertyId String?
  agency     agency?     @relation(fields: [agencyId], references: [id])
  properties properties? @relation(fields: [propertyId], references: [id])
  user       users       @relation(fields: [userId], references: [id])
  tenant     tenants[]
}

model Rating {
  id            String      @id @default(cuid())
  ratingValue   Int         @default(0)
  comments      String?
  propertyId    String?
  userId        String?
  ratedByUserId String
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime    @updatedAt @db.Timestamptz(6)
  property      properties? @relation(fields: [propertyId], references: [id])
  ratedBy       users       @relation("ratedByUser", fields: [ratedByUserId], references: [id])
  user          users?      @relation("userRated", fields: [userId], references: [id])
}

model creditScore {
  id                String   @id @default(cuid())
  userId            String   @unique
  score             Int
  lastUpdated       DateTime @default(now())
  paymentHistory    Float
  rentalHistory     Float
  maintainanceScore Float
  reviewScore       Float
  user              users    @relation(fields: [userId], references: [id])
}

model status {
  id        String  @id @default(cuid())
  name      String
  isDeleted Boolean @default(false)
}

enum YesNo {
  YES
  NO
}

enum userRoles {
  VENDOR
  LANDLORD
  TENANT
  WEBUSER
  AGENT
  ADMIN
}
