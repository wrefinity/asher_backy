enum LatePaymentFeeType {
  ONE_TIME
  DAILY
  WEEKLY
}

enum PropsApartmentStatus {
  OCCUPIED
  VACANT
  RENTED
  SOLD
  PENDING
  MAINTENANCE
}

enum Currency {
  NGN
  USD
  EUR
  GBP
}

enum PriceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  PER_SQFT
}

// Enums for predefined data
enum PropertyCategory {
  RESIDENTIAL
  COMMERCIAL
  SHOTLET
}

enum LeaseTermUnit {
  DAYS
  WEEKS
  MONTHS
  YEARS
}

enum AreaUnit {
  SQFT
  SQM
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum OfficeLayout {
  OPEN_PLAN
  CELLULAR
  MIXED
}

enum BuildingClass {
  A
  B
  C
  D
}

enum CancellationPolicy {
  FLEXIBLE
  MODERATE
  STRICT
  NON_REFUNDABLE
  CUSTOM
}

enum PropsSettingType {
  NOT_DEFINED
  APPLICATION
  SECURITY_DEPOSIT
  LATEFEE
}

enum Refundability {
  YES
  NO
}

enum ListingType {
  LISTING_WEBSITE
  ILS_SYNDICATION
}

enum ShortletType {
  MONTHLY
  DAILY
  YEARLY
}

model propertyListingHistory {
  id                String        @id @default(cuid())
  payApplicationFee Boolean       @default(false)
  isActive          Boolean       @default(true)
  isShortlet        Boolean       @default(false)
  shortletDuration  ShortletType? @default(MONTHLY)
  onListing         Boolean       @default(true) // turn it to be false if is leased out

  type ListingType? @default(LISTING_WEBSITE)

  propertyId String?     @unique // If set, these settings apply to the property
  property   properties? @relation(fields: [propertyId], references: [id])

  apartmentId String?     @unique // If set, these settings apply to a specific apartment
  apartment   apartments? @relation(fields: [apartmentId], references: [id])

  // time attributes
  createdAt DateTime? @default(now())
}

enum PropertyType {
  SINGLE_UNIT
  MULTI_UNIT
}

enum PropertySpecificationType {
  COMMERCIAL
  RESIDENTIAL
  SHORTLET
}

model properties {
  id        String    @id @default(cuid())
  // time attributes
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Features and Description
  name             String
  title            String?
  description      String?
  shortDescription String?
  propertysize     Int?
  isDeleted        Boolean @default(false)
  showCase         Boolean @default(false) //showcase as rentals

  //                                               owners
  landlordId String
  landlord   landlords @relation(fields: [landlordId], references: [id])
  agencyId   String?
  agency     agency?   @relation(fields: [agencyId], references: [id])
  agents     agents[]

  //                                               marketValue
  marketValue    Decimal?  @default(0.00) @db.Decimal(18, 2)
  rentalFee      Decimal?  @default(0.00) @db.Decimal(18, 2)
  initialDeposit Decimal?  @default(0.00) @db.Decimal(18, 2)
  dueDate        DateTime?

  // features
  noBedRoom           Int?      @default(1)
  noKitchen           Int?      @default(1)
  noGarage            Int?      @default(0)
  noBathRoom          Int?      @default(1)
  noReceptionRooms    Int       @default(0)
  totalArea           String?
  areaUnit            String    @default("sq-ft")
  yearBuilt           DateTime?
  councilTaxBand      String?
  tenure              String    @default("freehold")
  leaseYearsRemaining String?
  groundRent          String?
  serviceCharge       String?

  //                                               address
  city     String
  stateId  String?
  state    state?  @relation(fields: [stateId], references: [id])
  country  String
  zipcode  String
  location String?

  //                                               visualizations

  // Media
  images           String[]
  videourl         String[]
  image            PropertyMediaFiles[] @relation("PropertyImages")
  videos           PropertyMediaFiles[] @relation("PropertyVideos")
  virtualTours     PropertyMediaFiles[] @relation("PropertyVirtualTours")
  propertyDocument propertyDocument[]

  amenities            String[]
  //                                               apartments
  totalApartments      Int?
  apartments           apartments[]
  ratings              Rating[]
  tenants              tenants[]
  applicant            application[]
  maintenance          maintenance[]
  reviews              reviews[]
  bills                bills[]
  taskManagement       taskManagement[]
  inventoryManageMent  inventoryManageMent[]
  maintenanceWhitelist maintenanceWhitelist[]
  longitude            Decimal?               @db.Decimal(18, 6)
  latitude             Decimal?               @db.Decimal(18, 6)

  // Pricing, transaction, and budget
  price          String?
  // currency       Currency        @default(NGN)
  currency       String?
  priceFrequency PriceFrequency?
  rentalPeriod   String?
  transactions   Transaction[]
  Budget         Budget[]

  // Availability
  availability  PropsApartmentStatus? @default(VACANT)
  availableFrom DateTime?
  type          PropertyType?         @default(SINGLE_UNIT)

  //setting
  settings propApartmentSettings[]

  // specification for use types
  specificationType PropertySpecificationType? @default(RESIDENTIAL)
  useTypeCategory   String?
  residential       ResidentialProperty?
  commercial        CommercialProperty?
  shotlet           ShotletProperty?

  // Relation to applicationInvites
  applicationInvites     applicationInvites[]
  propertyListingHistory propertyListingHistory[]

  Complaint Complaint[]

  Log       Log[]       @relation("props")
  violation violation[] @relation("violations")

  PropertyViewing   PropertyViewing[]
  UserLikedProperty UserLikedProperty[]

  // Property Specific Details
  hasLift       Boolean @default(false)
  gardenType    String?
  gardenSize    String?
  parkingSpaces Int     @default(0)
  garageType    String?

  // Contact & Additional Information
  contactName         String?
  contactCompany      String?
  companyLogoUrl      String?
  viewingArrangements String?
  keyFeatures         String[]
  customKeyFeatures   String[]
  additionalNotes     String?

  // Multi-unit properties
  isMultiUnit        Boolean?            @default(false)
  totalUnits         Int?                @default(0)
  totalFloors        Int?                @default(0)
  unitsPerFloor      Int?                @default(0)
  unitConfigurations UnitConfiguration[]

  // HMO specific
  isHMO            Boolean? @default(false)
  hmoLicensed      Boolean? @default(false)
  hmoLicenseNumber String?
  hmoLicenseExpiry String?
  hmoMaxOccupants  Int?     @default(0)

  // Room rental specific
  isRoomRental Boolean?     @default(false)
  roomDetails  RoomDetail[]

  //  and Amenities
  customFeatures  String[]
  nearbyAmenities NearbyAmenity[]

  // Energy and Sustainability
  epcRating                 String?
  energyEfficiencyRating    Int      @default(0)
  environmentalImpactRating Int      @default(0)
  heatingTypes              String[]
  glazingType               String?

  // Shared facilities
  sharedFacilities SharedFacilities?

  @@unique([landlordId, name, stateId, city])
}

model NearbyAmenity {
  id         String     @id @default(cuid())
  name       String
  distance   String?
  property   properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
}

model SharedFacilities {
  id         String     @id @default(cuid())
  kitchen    Boolean    @default(false)
  bathroom   Boolean    @default(false)
  livingRoom Boolean    @default(false)
  garden     Boolean    @default(false)
  laundry    Boolean    @default(false)
  parking    Boolean    @default(false)
  other      String?
  property   properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String     @unique
}

model UnitConfiguration {
  id         String     @id @default(cuid())
  unitType   String
  count      Int
  bedrooms   Int
  bathrooms  Float
  price      String
  property   properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
}

model RoomDetail {
  id           String                @id @default(cuid())
  roomName     String
  roomSize     String
  ensuite      Boolean               @default(false)
  price        String
  availability PropsApartmentStatus? @default(VACANT)
  property     properties            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId   String
}

// Residential Property specific fields
model ResidentialProperty {
  id String @id @default(cuid())

  // Property relationship
  propertyId String     @unique
  property   properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Residential specific details
  bedrooms  Int
  bathrooms Float
  toilets   Int?
  furnished Boolean @default(false)
  serviced  Boolean @default(false)
  shared    Boolean @default(false)

  // Property features
  features       String[] // JSON array of feature IDs
  customFeatures String[] // JSON array of custom features

  // Nearby amenities
  nearbyAmenities       String[] // JSON array of amenity IDs
  customNearbyAmenities String[] // JSON array of custom amenities
  amenityDistances      Json? // JSON object mapping amenity ID to distance

  // Additional details
  totalArea       String?
  areaUnit        AreaUnit?
  parkingSpaces   Int?
  petPolicy       String?
  rentalTerms     String?
  securityDeposit String?
  utilities       String[] // JSON array of included utilities

  // Additional residential-specific fields
  propertyCondition String?
  balcony           Boolean @default(false)
  garden            Boolean @default(false)
  gym               Boolean @default(false)
  pool              Boolean @default(false)
  security          Boolean @default(false)
  waterSupply       String?
  powerSupply       String?
  internetAvailable Boolean @default(false)
  internetSpeed     String?
  furnishingDetails String?
  renovationYear    String?
}

// Commercial Property specific fields
model CommercialProperty {
  id String @id @default(cuid())

  // Property relationship
  propertyId String     @unique
  property   properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Commercial specific details
  totalArea       String
  areaUnit        AreaUnit
  minLeaseTerm    String
  maxLeaseTerm    String?
  leaseTermUnit   LeaseTermUnit
  businessRates   String?
  serviceCharge   String?
  buildingClass   BuildingClass?
  lastRefurbished String?
  floorNumber     Int?
  totalFloors     Int?
  parkingSpaces   Int?

  // Property specific types
  isOfficeSpace Boolean @default(false)
  isWarehouse   Boolean @default(false)
  isHighRise    Boolean @default(false)
  isMultiUnit   Boolean @default(false)
  isRetail      Boolean @default(false)
  isIndustrial  Boolean @default(false)

  // Office Space Details
  workstations Int?
  meetingRooms Int?
  hasReception Boolean       @default(false)
  officeLayout OfficeLayout?

  // Warehouse Details
  clearHeight       String?
  loadingDoorsCount Int?
  powerSupply       String?
  floorLoad         String?
  columnSpacing     String?
  hasYard           Boolean @default(false)
  yardDepth         String?

  // Features and Amenities
  features              String[] // JSON array of feature IDs
  customFeatures        String[] // JSON array of custom features
  nearbyAmenities       String[] // JSON array of amenity IDs
  customNearbyAmenities String[] // JSON array of custom amenities
  amenityDistances      Json? // JSON object mapping amenity ID to distance

  // Energy and Sustainability
  epcRating                 String?
  energyEfficiencyRating    Int?
  environmentalImpactRating Int?
  heatingTypes              String[] // JSON array of heating types
  coolingTypes              String[] // JSON array of cooling types
  hasGreenCertification     Boolean  @default(false)
  greenCertificationType    String?
  greenCertificationLevel   String?

  // Multi-unit properties
  totalUnits         Int?
  unitConfigurations CommercialPropertyUnit[]

  // High-rise building specific
  highRiseFloors    Int?
  floorAvailability CommercialPropertyFloor[]

  // Warehouse specific
  securityFeatures String[] // JSON array of security features

  // Key features
  keyFeatures       String[] // JSON array of key features
  customKeyFeatures String[] // JSON array of custom key features

  // Additional commercial-specific fields
  internetSpeed       String?
  hasElevator         Boolean @default(false)
  hasLoadingBay       Boolean @default(false)
  hasSprinklerSystem  Boolean @default(false)
  hasAlarmSystem      Boolean @default(false)
  hasCCTV             Boolean @default(false)
  has24HrAccess       Boolean @default(false)
  hasBackupGenerator  Boolean @default(false)
  fitOutIncluded      Boolean @default(false)
  fitOutDetails       String?
  leaseTerm           String?
  leaseTermNegotiable Boolean @default(true)
  rentReviewPeriod    String?
  breakClause         String?
  rentFreeOffered     Boolean @default(false)
  rentFreePeriod      String?
}

// Shotlet Property specific fields
model ShotletProperty {
  id String @id @default(cuid())

  // Property relationship
  propertyId String     @unique
  property   properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Host Information
  hostName     String
  hostPhotoUrl String?

  // Property Details
  bedrooms       Int
  beds           Int
  bathrooms      Float
  maxGuests      Int
  propertySize   String?
  sizeUnit       AreaUnit?
  floorLevel     Int?
  totalFloors    Int?
  renovationYear String?

  // Amenities
  amenities               String[] // JSON array of amenity IDs
  customAmenities         String[] // JSON array of custom amenities
  nearbyAttractions       String[] // JSON array of attraction IDs
  customNearbyAttractions String[] // JSON array of custom attractions
  attractionDistances     Json? // JSON object mapping attraction ID to distance
  safetyFeatures          String[] // JSON array of safety feature IDs
  customSafetyFeatures    String[] // JSON array of custom safety features

  // Availability & Pricing
  minStayDays      Int
  maxStayDays      Int
  availableTo      DateTime?
  cleaningFee      String?
  securityDeposit  String?
  weeklyDiscount   String?
  monthlyDiscount  String?
  unavailableDates DateTime[] // Array of dates when property is unavailable

  // House Rules
  checkInTime     String
  checkOutTime    String
  instantBooking  Boolean  @default(false)
  allowChildren   Boolean  @default(true)
  allowInfants    Boolean  @default(true)
  allowPets       Boolean  @default(false)
  allowSmoking    Boolean  @default(false)
  allowParties    Boolean  @default(false)
  quietHours      Boolean  @default(false)
  quietHoursStart String?
  quietHoursEnd   String?
  additionalRules String[] // JSON array of additional rules

  // Booking & Policies
  cancellationPolicy       CancellationPolicy
  customCancellationPolicy String?
  houseManual              String?
  checkInInstructions      String
  localRecommendations     String?
  emergencyContact         String?

  // Relationships
  seasonalPricing SeasonalPricing[]
  bookings        Booking[]

  // Additional shotlet-specific fields
  hasWifi            Boolean @default(true)
  wifiSpeed          String?
  hasTV              Boolean @default(false)
  hasKitchen         Boolean @default(true)
  hasWasher          Boolean @default(false)
  hasDryer           Boolean @default(false)
  hasAirConditioning Boolean @default(false)
  hasHeating         Boolean @default(false)
  hasWorkspace       Boolean @default(false)
  hasPool            Boolean @default(false)
  hasHotTub          Boolean @default(false)
  hasFreeParking     Boolean @default(false)
  hasGym             Boolean @default(false)
  hasBreakfast       Boolean @default(false)
  hasSelfCheckin     Boolean @default(false)
  hasBalcony         Boolean @default(false)
  hasGarden          Boolean @default(false)
  hasBBQ             Boolean @default(false)
  hasFireplace       Boolean @default(false)
  hasBeachAccess     Boolean @default(false)
  hasLakeAccess      Boolean @default(false)
  hasMountainView    Boolean @default(false)
  hasOceanView       Boolean @default(false)
  hasCityView        Boolean @default(false)
}

// Commercial property specific models
model CommercialPropertyUnit {
  id          String  @id @default(cuid())
  unitType    String
  unitNumber  String?
  floorNumber Int
  area        String
  price       String
  available   Boolean @default(true)
  description String?

  // Relationships
  propertyId String
  property   CommercialProperty @relation(fields: [propertyId], references: [id])
}

model CommercialPropertyFloor {
  id           String  @id @default(cuid())
  floorNumber  Int
  area         String
  price        String
  available    Boolean @default(true)
  partialFloor Boolean @default(false)
  description  String?

  // Relationships
  propertyId String
  property   CommercialProperty @relation(fields: [propertyId], references: [id])
}

// Shotlet property specific models
model SeasonalPricing {
  id         String   @id @default(cuid())
  seasonName String
  startDate  DateTime
  endDate    DateTime
  price      String

  // Relationships
  propertyId String
  property   ShotletProperty @relation(fields: [propertyId], references: [id])
}

model Booking {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  checkInDate  DateTime
  checkOutDate DateTime
  guestCount   Int
  totalPrice   String
  status       BookingStatus @default(PENDING)

  guestName            String
  guestEmail           String
  guestPhone           String?
  specialRequests      String?
  paymentStatus        String?
  paymentMethod        String?
  transactionReference String?

  // Relationships
  propertyId String
  property   ShotletProperty @relation(fields: [propertyId], references: [id])
  userId     String?
  user       users?          @relation(fields: [userId], references: [id])
}

model apartments {
  id                   String                         @id @default(cuid())
  code                 String
  name                 String
  size                 String // 2500sqf
  monthlyRent          String
  minLeaseDuration     String
  maxLeaseDuration     String
  description          String
  sittingRoom          Int?
  waitingRoom          Int?
  bedrooms             Int?
  kitchen              Int?
  bathrooms            Int?
  garages              Int?
  floorplans           String[]
  facilities           String[]
  offices              Int?
  isVacant             Boolean                        @default(true)
  isDeleted            Boolean                        @default(false)
  rentalAmount         Decimal
  images               String[]
  videourl             String[]
  propertyId           String
  property             properties                     @relation(fields: [propertyId], references: [id])
  histories            appartmentTransactionHistory[]
  tenantPaymentHistory tenantPaymentHistory[]
  tenantsId            String?
  currentTenant        tenants?                       @relation(fields: [tenantsId], references: [id])
  maintenance          maintenance[]
  reviews              reviews[]
  propertyDocument     propertyDocument[]
  inventoryManageMent  inventoryManageMent[]
  maintenanceWhitelist maintenanceWhitelist[]
  transactions         Transaction[]

  settings               propApartmentSettings[]
  applicationInvites     applicationInvites[]
  propertyListingHistory propertyListingHistory?
}

model PropertyViewing {
  id         String   @id @default(cuid())
  userId     String // Foreign key reference to the user viewing the property
  propertyId String // Foreign key reference to the property being viewed
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isLiked    Boolean  @default(false) // Indicates if the user liked the property
  review     String? // Optional review text left by the user
  rating     Int? // Optional rating (e.g., 1-5 stars)

  //                                                                         Relationships
  user     users      @relation(fields: [userId], references: [id])
  property properties @relation(fields: [propertyId], references: [id])
}

model propApartmentSettings {
  id         String     @id @default(cuid())
  // Optional relationships to differentiate setting scopes
  landlordId String?
  landlord   landlords? @relation(fields: [landlordId], references: [id])

  propertyId String?
  property   properties? @relation(fields: [propertyId], references: [id])

  apartmentId String?
  apartment   apartments? @relation(fields: [apartmentId], references: [id])

  // Setting categorization
  settingType PropsSettingType @default(NOT_DEFINED)

  // late fee settings
  lateFee           Decimal             @default(0.00) @db.Decimal(18, 2) // for fixed scenario
  lateFeeFrequency  LatePaymentFeeType?
  lateFeePercentage Int?                @default(0)
  gracePeriodDays   Int?

  // security deposit
  depositPercentage Decimal @default(0.00) @db.Decimal(5, 2)
  refundTimeframe   String? // Options like '7 days', '30 days'

  //                                                                  application
  applicationFee Decimal        @default(0.00) @db.Decimal(5, 2)
  refundPolicy   Refundability? // Describe refund policy [YES OR NO]

  //                                                                  Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([propertyId, settingType])
}
