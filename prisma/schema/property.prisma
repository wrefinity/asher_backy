model propertyListingHistory {
  id                   String                     @id @default(cuid())
  payApplicationFee    Boolean                    @default(false)
  isActive             Boolean                    @default(true)
  onListing            Boolean                    @default(true)
  type                 ListingType?               @default(SINGLE_UNIT)
  propertyId           String?
  listAs               PropertySpecificationType? @default(SHORTLET)
  propertySubType      PropertyType?
  unitId               String?
  roomId               String?
  price                Decimal?                   @default(0.00) @db.Decimal(18, 2)
  priceFrequency       PriceFrequency?
  securityDeposit      Decimal?                   @default(0.00) @db.Decimal(18, 2)
  minStayDays          Int?
  maxStayDays          Int?
  createdAt            DateTime?                  @default(now())
  availableFrom        DateTime?
  availableTo          DateTime?
  applicationFeeAmount Decimal?                   @default(0.00) @db.Decimal(18, 2)
  Log                  Log[]
  applicationInvites   applicationInvites[]
  property             properties?                @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  room                 RoomDetail?                @relation(fields: [roomId], references: [id])
  unit                 UnitConfiguration?         @relation(fields: [unitId], references: [id])

  @@index([propertyId, isActive, onListing])
  @@index([isActive, onListing, createdAt])
  @@index([availableFrom, availableTo])
  @@index([price, priceFrequency])
  @@index([listAs, propertySubType])
  @@index([createdAt])
  @@index([unitId, isActive])
  @@index([roomId, isActive])
  @@index([minStayDays, maxStayDays])
  @@index([isActive, onListing, propertyId, createdAt])
}

model SuitableUse {
  id                   String             @id @default(uuid())
  name                 String
  commercialPropertyId String
  commercialProperty   CommercialProperty @relation(fields: [commercialPropertyId], references: [id], onDelete: Cascade)

  @@index([commercialPropertyId])
  @@index([name])
}

model AdditionalRule {
  id         String           @id @default(uuid())
  rule       String
  shortletId String
  shortlet   ShortletProperty @relation(fields: [shortletId], references: [id], onDelete: Cascade)

  @@index([shortletId])
}

model UnavailableDate {
  id         String           @id @default(uuid())
  date       DateTime
  shortletId String
  shortlet   ShortletProperty @relation(fields: [shortletId], references: [id], onDelete: Cascade)

  @@index([shortletId, date])
  @@index([date])
}

model HostLanguage {
  id         String           @id @default(uuid())
  language   String
  shortletId String
  shortlet   ShortletProperty @relation(fields: [shortletId], references: [id], onDelete: Cascade)

  @@index([shortletId])
  @@index([language])
}

model properties {
  id                     String                     @id @default(cuid())
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime?                  @updatedAt
  name                   String
  description            String?
  propertySize           Int?
  isDeleted              Boolean                    @default(false)
  landlordId             String
  agencyId               String?
  marketValue            Decimal?                   @default(0.00) @db.Decimal(18, 2)
  price                  Decimal?                   @default(0.00) @db.Decimal(18, 2)
  securityDeposit        Decimal?                   @default(0.00) @db.Decimal(18, 2)
  areaUnit               AreaUnit                   @default(SQFT)
  yearBuilt              Int?
  city                   String
  stateId                String
  country                String
  zipcode                String
  longitude              Decimal?                   @db.Decimal(18, 6)
  latitude               Decimal?                   @db.Decimal(18, 6)
  address                String
  address2               String?
  currency               Currency?                  @default(NGN)
  priceFrequency         PriceFrequency?
  rentalPeriod           String?
  availability           AvailabilityStatus?        @default(VACANT)
  businessRateVerified   Boolean                    @default(false)
  postalCodeVerified     Boolean                    @default(false)
  landRegistryNumber     String?
  vatStatus              VatStatus?                 @default(VAT_EXEMPT)
  specificationType      PropertySpecificationType? @default(RESIDENTIAL)
  keyFeatures            String[]
  customKeyFeatures      String[]
  count                  Int?
  isListed               Boolean                    @default(false)
  BroadcastCategory      BroadcastCategory[]
  Budget                 Budget[]
  Complaint              Complaint[]
  leaseRenewals          LeaseRenewal[]
  Log                    Log[]                      @relation("props")
  images                 PropertyMediaFiles[]       @relation("PropertyImages")
  videos                 PropertyMediaFiles[]       @relation("PropertyVideos")
  virtualTours           PropertyMediaFiles[]       @relation("PropertyVirtualTours")
  specification          PropertySpecification[]
  ratings                Rating[]
  TenantLeaseBreach      TenantLeaseBreach[]
  transactions           Transaction[]
  UserLikedProperty      UserLikedProperty[]
  agents                 agents[]
  application            application[]
  applicationInvites     applicationInvites[]
  billsSubCategory       billsSubCategory[]
  inspection             inspection[]
  inventoryManageMent    inventoryManageMent[]
  maintenance            maintenance[]
  maintenanceWhitelist   maintenanceWhitelist[]
  agency                 agency?                    @relation(fields: [agencyId], references: [id])
  landlord               landlords                  @relation(fields: [landlordId], references: [id])
  state                  state                      @relation(fields: [stateId], references: [id])
  propertyDocument       propertyDocument[]
  propertyListingHistory propertyListingHistory[]
  settings               propertySettings[]
  reviews                reviews[]
  taskManagement         taskManagement[]
  tenants                tenants[]
  violation              violation[]                @relation("violations")

  @@unique([landlordId, name, stateId, city])
  @@index([landlordId, isDeleted, isListed])
  @@index([agencyId, isDeleted, isListed])
  @@index([stateId, city, isDeleted])
  @@index([city, availability, isListed])
  @@index([availability, isListed, isDeleted])
  @@index([price, priceFrequency, availability])
  @@index([specificationType, isListed, isDeleted])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([isListed, availability, createdAt])
  @@index([longitude, latitude])
  @@index([zipcode, city])
  @@index([yearBuilt])
  @@index([marketValue])
  @@index([name])
  @@index([address])
  @@index([landlordId, isDeleted, availability, createdAt])
  @@index([city, specificationType, availability, price])
}

model PropertySpecification {
  id                String                    @id @default(cuid())
  propertyId        String
  specificationType PropertySpecificationType
  propertySubType   PropertyType?
  otherTypeSpecific Json?
  isActive          Boolean                   @default(true)
  fromDate          DateTime?
  toDate            DateTime?
  residentialId     String?
  commercialId      String?
  shortletId        String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  commercial        CommercialProperty?       @relation(fields: [commercialId], references: [id])
  property          properties                @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  residential       ResidentialProperty?      @relation(fields: [residentialId], references: [id])
  shortlet          ShortletProperty?         @relation(fields: [shortletId], references: [id])

  @@index([propertyId, specificationType, isActive])
  @@index([specificationType, propertySubType, isActive])
  @@index([residentialId])
  @@index([commercialId])
  @@index([shortletId])
  @@index([isActive, fromDate, toDate])
  @@index([createdAt])
}

model SharedFacilities {
  id                    String               @id @default(cuid())
  kitchen               Boolean              @default(false)
  bathroom              Boolean              @default(false)
  livingRoom            Boolean              @default(false)
  garden                Boolean              @default(false)
  garage                Boolean              @default(false)
  laundry               Boolean              @default(false)
  parking               Boolean              @default(false)
  other                 String?
  residentialPropertyId String?              @unique
  commercialPropertyId  String?
  shortletPropertyId    String?
  CommercialProperty    CommercialProperty?  @relation(fields: [commercialPropertyId], references: [id])
  residentialProperty   ResidentialProperty? @relation(fields: [residentialPropertyId], references: [id], onDelete: Cascade)
  ShortletProperty      ShortletProperty?    @relation(fields: [shortletPropertyId], references: [id])

  @@index([residentialPropertyId])
  @@index([commercialPropertyId])
  @@index([shortletPropertyId])
  @@index([parking, garden, garage])
  @@index([kitchen, bathroom, laundry])
}

model UnitConfiguration {
  id                     String                   @id @default(cuid())
  unitType               String
  unitNumber             String?
  floorNumber            Int?
  count                  Int?
  bedrooms               Int?
  bathrooms              Int?
  price                  String
  area                   String?
  isDeleted              Boolean                  @default(false)
  isListed               Boolean                  @default(false)
  description            String?
  availability           AvailabilityStatus?
  residentialPropertyId  String?
  commercialPropertyId   String?
  priceFrequency         PriceFrequency?
  ensuite                Boolean?                 @default(false)
  furnished              Boolean?                 @default(false)
  kitchens               Int?
  Booking                Booking[]
  Log                    Log[]
  RoomDetail             RoomDetail[]
  Transaction            Transaction[]
  CommercialProperty     CommercialProperty?      @relation(fields: [commercialPropertyId], references: [id])
  ResidentialProperty    ResidentialProperty?     @relation(fields: [residentialPropertyId], references: [id])
  application            application[]
  applicationInvites     applicationInvites[]
  maintenance            maintenance[]
  maintenanceWhitelist   maintenanceWhitelist[]
  propertyListingHistory propertyListingHistory[]
  tenants                tenants[]
  violation              violation[]
  images                 PropertyMediaFiles[]     @relation("UnitImages")

  @@index([residentialPropertyId, isDeleted, availability])
  @@index([commercialPropertyId, isDeleted, availability])
  @@index([availability, isListed, isDeleted])
  @@index([unitType, availability, isListed])
  @@index([bedrooms, bathrooms, availability])
  @@index([price, priceFrequency])
  @@index([floorNumber])
  @@index([ensuite, furnished])
  @@index([residentialPropertyId, availability, bedrooms, bathrooms])
  @@index([commercialPropertyId, availability, unitType])
}

model RoomDetail {
  id                     String                   @id @default(cuid())
  roomName               String
  roomSize               String
  ensuite                Boolean                  @default(false)
  isDeleted              Boolean                  @default(false)
  price                  String
  availability           AvailabilityStatus?      @default(VACANT)
  isListed               Boolean                  @default(false)
  residentialPropertyId  String?
  commercialPropertyId   String?
  shortletPropertyId     String?
  count                  Int?
  priceFrequency         PriceFrequency?
  unitId                 String?
  furnished              Boolean?                 @default(false)
  description            String?
  Booking                Booking[]
  Log                    Log[]
  CommercialProperty     CommercialProperty?      @relation(fields: [commercialPropertyId], references: [id])
  ResidentialProperty    ResidentialProperty?     @relation(fields: [residentialPropertyId], references: [id])
  ShortletProperty       ShortletProperty?        @relation(fields: [shortletPropertyId], references: [id])
  unit                   UnitConfiguration?       @relation(fields: [unitId], references: [id])
  Transaction            Transaction[]
  application            application[]
  applicationInvites     applicationInvites[]
  maintenance            maintenance[]
  maintenanceWhitelist   maintenanceWhitelist[]
  propertyListingHistory propertyListingHistory[]
  tenants                tenants[]
  images                 PropertyMediaFiles[]     @relation("RoomImages")

  @@index([residentialPropertyId, isDeleted, availability])
  @@index([commercialPropertyId, isDeleted, availability])
  @@index([shortletPropertyId, isDeleted, availability])
  @@index([unitId, availability, isListed])
  @@index([availability, isListed, isDeleted])
  @@index([roomName])
  @@index([price, priceFrequency])
  @@index([ensuite, furnished])
  @@index([residentialPropertyId, availability, ensuite, furnished])
  @@index([shortletPropertyId, availability, isListed, price])
}

model ResidentialProperty {
  id                        String                  @id @default(cuid())
  status                    PropertyStatus          @default(FOR_RENT)
  bedrooms                  Int?
  bathrooms                 Int?
  receiptionRooms           Int?
  toilets                   Int?
  tenure                    TensureType?
  furnished                 Boolean?
  renovationYear            String?
  councilTaxBand            String?
  garageType                GarageType?
  yearBuilt                 Int?
  floorLevel                Int?
  totalArea                 String?
  areaUnit                  AreaUnit?
  rentalTerms               String?
  utilities                 String[]
  garden                    String?
  gardenSize                String?
  houseStyle                String?
  numberOfStories           String?
  outdoorsSpacesFeatures    String[]
  otherSharedFacilities     String[]
  houseRule                 String?
  maxOccupant               Int?
  isHMO                     Boolean?
  isShareHouse              Boolean?
  isHMOLicenced             Boolean?
  hmoLicenceNumber          String?
  hmoLicenceExpiryDate      DateTime?
  totalOccupants            Int?
  occupantsDetails          String?
  totalFloors               Int?
  unitPerFloors             Int?
  totalUnits                Int?
  buildingAmenityFeatures   String[]
  safetyFeatures            String[]
  customSafetyFeatures      String[]
  epcRating                 String?
  energyEfficiencyRating    Int?
  environmentalImpactRating Int?
  heatingTypes              String[]
  coolingTypes              String[]
  glazingTypes              GlazingType?
  additionalNotes           String?
  availableFrom             DateTime?
  PropertySpecification     PropertySpecification[]
  roomDetails               RoomDetail[]
  sharedFacilities          SharedFacilities?
  unitConfigurations        UnitConfiguration[]
  billsSubCategory          billsSubCategory[]      @relation("ResidentialPropertyTobillsSubCategory")

  @@index([status])
  @@index([bedrooms, bathrooms])
  @@index([furnished])
  @@index([yearBuilt])
  @@index([totalArea])
  @@index([isHMO, isHMOLicenced])
  @@index([availableFrom])
  @@index([epcRating, energyEfficiencyRating])
  @@index([status, bedrooms, bathrooms, furnished])
  @@index([yearBuilt, totalArea, status])
}

model CommercialProperty {
  id                        String                    @id @default(cuid())
  totalArea                 String
  areaUnit                  AreaUnit
  businessRates             String?
  serviceCharge             Float?
  leaseTermUnit             LeaseTermUnit
  minimumLeaseTerm          Int
  maximumLeaseTerm          Int?
  buildingClass             BuildingClass?
  lastRefurbished           String?
  totalFloors               Int?
  zoning                    String?
  yearBuilt                 Int?
  totalRooms                Int
  parkingSpaces             Int                       @default(0)
  floorLevel                Int?
  availableFrom             DateTime?
  floorNumber               Int?
  workstations              Int?
  meetingRooms              Int?
  officeLayout              OfficeLayout?
  highRiseFloors            Int?
  securityFeatures          String[]
  clearHeight               String?
  loadingDoorsCount         Int?
  powerSupply               String?
  floorLoad                 String?
  columnSpacing             String?
  hasYard                   Boolean                   @default(false)
  yardDepth                 String?
  safetyFeatures            String[]
  customSafetyFeatures      String[]
  epcRating                 String?
  energyEfficiencyRating    Int?
  environmentalImpactRating Int?
  heatingTypes              String[]
  coolingTypes              String[]
  hasGreenCertification     Boolean                   @default(false)
  greenCertificationType    String?
  greenCertificationLevel   String?
  totalUnits                Int?
  leaseTerm                 String?
  leaseTermNegotiable       Boolean                   @default(true)
  rentReviewPeriod          String?
  breakClause               String?
  rentFreeOffered           Boolean                   @default(false)
  rentFreePeriod            String?
  otherSharedFacilities     String[]
  houseRule                 String?
  maxOccupant               Int?
  isHMO                     Boolean?
  isShareHouse              Boolean?
  isHMOLicenced             Boolean?
  hmoLicenceNumber          String?
  hmoLicenceExpiryDate      DateTime?
  totalOccupants            Int?
  occupantsDetails          String?
  floorAvailability         CommercialPropertyFloor[]
  PropertySpecification     PropertySpecification[]
  roomDetails               RoomDetail[]
  sharedFacilities          SharedFacilities[]
  suitableFor               SuitableUse[]
  unitConfigurations        UnitConfiguration[]

  @@index([buildingClass])
  @@index([totalArea, areaUnit])
  @@index([parkingSpaces])
  @@index([officeLayout])
  @@index([availableFrom])
  @@index([leaseTermUnit, minimumLeaseTerm])
  @@index([hasGreenCertification])
  @@index([epcRating])
  @@index([totalFloors, floorLevel])
  @@index([workstations, meetingRooms])
  @@index([buildingClass, totalArea, availableFrom])
  @@index([parkingSpaces, officeLayout, hasGreenCertification])
}

model ShortletProperty {
  id                       String                  @id @default(cuid())
  lotSize                  Int?
  garageSpaces             Int?
  outdoorsSpacesFeatures   String[]
  buildingName             String?
  unitNumber               Int?
  buildingAmenityFeatures  String[]
  safetyFeatures           String[]
  customSafetyFeatures     String[]
  bedrooms                 Int?
  beds                     Int?
  bathrooms                Int?
  maxGuests                Int?
  propertySize             String?
  sizeUnit                 AreaUnit?
  floorLevel               Int?
  totalFloors              Int?
  renovationYear           String?
  yearBuilt                Int?
  furnished                Boolean                 @default(true)
  minStayDays              Int?
  maxStayDays              Int?
  availableFrom            DateTime?
  availableTo              DateTime?
  basePrice                Float?
  cleaningFee              Float?
  weeklyDiscount           Float?
  monthlyDiscount          Float?
  checkInTime              String?
  checkOutTime             String?
  instantBooking           Boolean                 @default(false)
  allowChildren            Boolean                 @default(true)
  allowInfants             Boolean                 @default(true)
  allowPets                Boolean                 @default(false)
  allowSmoking             Boolean                 @default(false)
  allowParties             Boolean                 @default(false)
  quietHours               Boolean                 @default(false)
  quietHoursStart          String?
  quietHoursEnd            String?
  cancellationPolicy       CancellationPolicy?
  customCancellationPolicy String?
  houseManual              String?
  checkInInstructions      String?
  localRecommendations     String?
  emergencyContact         String?
  hostName                 String?
  hostPhotoUrl             String?
  responseRate             Float?
  responseTime             String?
  isSuperhost              Boolean                 @default(false)
  joinedDate               DateTime?
  otherSharedFacilities    String[]
  houseRule                String?
  maxOccupant              Int?
  isHMO                    Boolean?
  isShareHouse             Boolean?
  isHMOLicenced            Boolean?
  hmoLicenceNumber         String?
  hmoLicenceExpiryDate     DateTime?
  totalOccupants           Int?
  occupantsDetails         String?
  additionalRules          AdditionalRule[]
  bookings                 Booking[]
  hostLanguages            HostLanguage[]
  PropertySpecification    PropertySpecification[]
  roomDetails              RoomDetail[]
  seasonalPricing          SeasonalPricing[]
  sharedFacilities         SharedFacilities[]
  unavailableDates         UnavailableDate[]

  @@index([availableFrom, availableTo])
  @@index([bedrooms, bathrooms, maxGuests])
  @@index([basePrice])
  @@index([furnished])
  @@index([instantBooking])
  @@index([minStayDays, maxStayDays])
  @@index([cancellationPolicy])
  @@index([isSuperhost])
  @@index([allowPets, allowSmoking, allowParties])
  @@index([availableFrom, availableTo, bedrooms, basePrice])
  @@index([isSuperhost, instantBooking, cancellationPolicy])
}

model CommercialPropertyFloor {
  id           String             @id @default(cuid())
  floorNumber  Int
  area         String?
  price        String
  available    Boolean            @default(true)
  partialFloor Boolean            @default(false)
  description  String?
  amenities    String[]
  propertyId   String
  property     CommercialProperty @relation(fields: [propertyId], references: [id])

  @@index([propertyId, available])
  @@index([floorNumber])
  @@index([available, floorNumber])
  @@index([price])
}

model SeasonalPricing {
  id         String           @id @default(cuid())
  seasonName String
  startDate  DateTime
  endDate    DateTime
  price      String
  propertyId String
  property   ShortletProperty @relation(fields: [propertyId], references: [id])

  @@index([propertyId, startDate, endDate])
  @@index([startDate, endDate])
  @@index([price])
}

model Booking {
  id                   String              @id @default(cuid())
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  checkInDate          DateTime
  checkOutDate         DateTime
  guestCount           Int
  totalPrice           String
  status               BookingStatus       @default(PENDING)
  guestName            String
  guestEmail           String
  guestPhone           String?
  specialRequests      String?
  paymentStatus        String?
  paymentMethod        String?
  transactionReference String?
  propertyId           String
  userId               String?
  unitConfigurationId  String?
  roomDetailId         String?
  cancellationPolicy   CancellationPolicy? @default(FLEXIBLE)
  isRefundable         Refundability       @default(YES)
  property             ShortletProperty    @relation(fields: [propertyId], references: [id])
  roomDetail           RoomDetail?         @relation(fields: [roomDetailId], references: [id], onDelete: Cascade)
  unitConfiguration    UnitConfiguration?  @relation(fields: [unitConfigurationId], references: [id], onDelete: Cascade)
  user                 users?              @relation(fields: [userId], references: [id])

  @@index([propertyId, checkInDate, checkOutDate])
  @@index([userId, createdAt])
  @@index([status, paymentStatus])
  @@index([checkInDate, checkOutDate])
  @@index([guestEmail])
  @@index([guestPhone])
  @@index([createdAt])
  @@index([unitConfigurationId, roomDetailId])
  @@index([cancellationPolicy, isRefundable])
  @@index([propertyId, status, checkInDate])
  @@index([userId, status, createdAt])
  @@index([checkInDate, status, paymentStatus])
}

model propertySettings {
  id                String              @id @default(cuid())
  landlordId        String?
  propertyId        String?
  settingType       PropsSettingType    @default(NOT_DEFINED)
  lateFee           Decimal             @default(0.00) @db.Decimal(18, 2)
  lateFeeFrequency  LatePaymentFeeType?
  lateFeePercentage Int?                @default(0)
  gracePeriodDays   Int?
  depositPercentage Decimal             @default(0.00) @db.Decimal(5, 2)
  refundTimeframe   String?
  applicationFee    Decimal             @default(0.00) @db.Decimal(5, 2)
  refundPolicy      Refundability?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  landlord          landlords?          @relation(fields: [landlordId], references: [id])
  property          properties?         @relation(fields: [propertyId], references: [id])

  @@unique([propertyId, settingType])
  @@index([landlordId])
  @@index([propertyId])
  @@index([settingType])
  @@index([createdAt])
}

enum LatePaymentFeeType {
  ONE_TIME
  DAILY
  WEEKLY
}

enum PriceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  PER_SQFT
}

enum TensureType {
  FREEHOLD
  LEASE_HOLD
  SHARE_OR_FREEHOLD
  COMMONHOLD
}

enum GarageType {
  ATTACHED_GARAGE
  DETACHED_GARAGE
  INTEGRAL_GARAGE
}

enum VatStatus {
  VAT_EXEMPT
  VAT_APPLICABLE
  VAT_OPTIONAL
}

enum PropertyType {
  SINGLE_UNIT
  MULTI_UNIT
  HOUSE
  HOUSE_MULTIPLE_OCCUPATION
  SHARED_HOUSE
  RENTAL_ROOM
  APARTMENT
  VILLA
  CONDOMINIUM
  STUDIO
  PENTHOUSE
  BUNGALOW
  DUPLEX
  TOWNHOUSE
  COTTAGE
  LOFT
  CHALET
  OFFICE_SPACE
  RETAIL_SPACE
  WAREHOUSE
  INDUSTRIAL_UNIT
  LEISURE_FACILITY
  HOTEL
  RESTUARANT_CAFE
  MIXED_USE_BUILDING
  COMMERCIAL_LAND
  CO_WORKING_SPACE
  SERVICED_OFFICE
  WORKSHOP
  HIGH_RISE_COMMERCIAL_BUILDING
  HIGH_RISE_BUILDING
  MEDICAL_FACILITY
  STORAGE_FACILITY
  EDUCATIONAL_FACILITY
  SHOW_ROOM
  COMMERICAL_GARAGE
  BUSINESS_PARK_UNIT
  DATA_CENTER
  OTHER
  DETACHED
  SEMI_DETACHED
  FLAT
}

enum PropertyStatus {
  FOR_SALE
  FOR_RENT
  SOLD
  RENTED
}

enum GlazingType {
  SINGLE_GLAZING
  DOUBLE_GLAZING
  TRIPLE_GLAZING
  SECONDARY_GLAZING
  MIXED_GLAZING
}

enum PropertySpecificationType {
  COMMERCIAL
  RESIDENTIAL
  SHORTLET
}

enum AvailabilityStatus {
  OCCUPIED
  VACANT
  RENTED
  RESERVED
  COMING_SOON
  SOLD
  PENDING
  MAINTENANCE
}

enum Currency {
  NGN
  USD
  EUR
  GBP
}

enum LeaseTermUnit {
  DAYS
  WEEKS
  MONTHS
  YEARS
}

enum AreaUnit {
  SQFT
  SQM
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum OfficeLayout {
  OPEN_PLAN
  CELLULAR
  MIXED
}

enum BuildingClass {
  A
  B
  C
  D
}

enum CancellationPolicy {
  FLEXIBLE
  MODERATE
  STRICT
  NON_REFUNDABLE
  CUSTOM
}

enum PropsSettingType {
  NOT_DEFINED
  APPLICATION
  SECURITY_DEPOSIT
  LATEFEE
}

enum Refundability {
  YES
  NO
}

enum ListingType {
  SINGLE_UNIT
  ROOM
  ENTIRE_PROPERTY
  SHARED_ROOM
  BED_SPACE
  CO_TENANCY
}

enum PropertyFeatureType {
  SECURITY
  KEY
  SAFETY
  AMENITY
  OFFICE_AMENITY
  BUILDING_AMENITY
  OUTDOORS_SPACE
}
