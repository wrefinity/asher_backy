model maintenance {
  id                        String                         @id @default(cuid())
  description               String
  attachments               String[]
  offer                     String[]
  scheduleDate              DateTime?
  reScheduleMax             Int?                           @default(1)
  reScheduleDate            DateTime?
  createdAt                 DateTime                       @default(now())
  updatedAt                 DateTime                       @updatedAt
  isDeleted                 Boolean                        @default(false)
  handleByLandlord          Boolean                        @default(false)
  landlordDecision          maintenanceDecisionStatus?
  cancelReason              String?
  flagCancellation          Boolean?                       @default(false)
  vendorConsentCancellation Boolean?
  tenantId                  String?
  landlordId                String?
  vendorId                  String?
  propertyId                String?
  categoryId                String
  chatRoomId                String?                        @unique
  status                    maintenanceStatus              @default(UNASSIGNED)
  serviceId                 String?
  paymentStatus             TransactionStatus              @default(PENDING)
  amount                    Decimal?                       @db.Decimal(18, 2)
  roomId                    String?
  unitId                    String?
  endAttachments            String[]
  startAttachments          String[]
  isPaused                  Boolean                        @default(false)
  pauseResumeDate           DateTime?
  rescheduleReason          String?
  rescheduleRequestDate     DateTime?
  rescheduleRequestStatus   maintenanceRescheduleStatus?   @default(PENDING)
  category                  category                       @relation(fields: [categoryId], references: [id])
  chatRoom                  ChatRoom?                      @relation(fields: [chatRoomId], references: [id])
  landlord                  landlords?                     @relation("landlordUser", fields: [landlordId], references: [id])
  property                  properties?                    @relation(fields: [propertyId], references: [id])
  rooms                     RoomDetail?                    @relation(fields: [roomId], references: [id])
  services                  services?                      @relation(fields: [serviceId], references: [id])
  tenant                    tenants?                       @relation("tenantUser", fields: [tenantId], references: [id])
  units                     UnitConfiguration?             @relation(fields: [unitId], references: [id])
  vendor                    vendors?                       @relation("vendorUser", fields: [vendorId], references: [id])
  reScheduleHistory         maintenanceRescheduleHistory[]
  maintenanceStatusHistory  maintenanceStatusHistory[]
  subcategories             subCategory[]                  @relation("SubCategoryMaintenance")
  maintenanceAssignmentHistory maintenanceAssignmentHistory[]

  @@index([vendorId])
  @@index([status])
}

model maintenanceRescheduleHistory {
  id            String      @id @default(cuid())
  maintenanceId String
  oldDate       DateTime
  newDate       DateTime
  maintenance   maintenance @relation(fields: [maintenanceId], references: [id])
}

model maintenanceStatusHistory {
  id            String            @id @default(cuid())
  maintenanceId String
  oldStatus     maintenanceStatus
  newStatus     maintenanceStatus
  vendorId      String?
  changedAt     DateTime          @default(now())
  maintenance   maintenance       @relation(fields: [maintenanceId], references: [id])
  vendor        vendors?           @relation(fields: [vendorId], references: [id])
}

model maintenanceAssignmentHistory {
  id            String            @id @default(cuid())
  maintenanceId String
  vendorId      String?
  assignedAt    DateTime          @default(now())
  unassignedAt  DateTime?
  reasonLeft    String?
  state         maintenanceStatus @default(ASSIGNED)
  maintenance   maintenance @relation(fields: [maintenanceId], references: [id])
  vendor       vendors?   @relation(fields: [vendorId], references: [id])
}

model services {
  id                 String             @id @default(cuid())
  currentJobs        Int                @default(0)
  availability       vendorAvailability @default(YES)
  standardPriceRange String
  mediumPriceRange   String
  premiumPriceRange  String
  isDeleted          Boolean            @default(false)
  vendorId           String
  categoryId         String?
  subcategoryId      String?
  tenantId           String?
  maintenance        maintenance[]
  category           category?          @relation(fields: [categoryId], references: [id])
  subcategory        subCategory?       @relation(fields: [subcategoryId], references: [id])
  tenant             tenants?           @relation(fields: [tenantId], references: [id])
  vendor             vendors            @relation(fields: [vendorId], references: [id])
}

model maintenanceWhitelist {
  id            String             @id @default(cuid())
  categoryId    String
  subcategoryId String?
  landlordId    String
  propertyId    String?
  isActive      Boolean            @default(true)
  roomId        String?
  unitId        String?
  category      category           @relation(fields: [categoryId], references: [id])
  landlord      landlords          @relation(fields: [landlordId], references: [id])
  property      properties?        @relation(fields: [propertyId], references: [id])
  rooms         RoomDetail?        @relation(fields: [roomId], references: [id])
  subcategory   subCategory?       @relation(fields: [subcategoryId], references: [id])
  units         UnitConfiguration? @relation(fields: [unitId], references: [id])
}

enum maintenanceStatus {
  ASSIGNED
  UNASSIGNED
  PENDING
  COMPLETED
  CANCELLATION_REQUEST
  CANCEL
  IN_PROGRESS
  PAUSED
  RESUMED
}

enum maintenanceRescheduleStatus {
  PENDING
  APPROVED
  DECLINED
}

enum maintenanceDecisionStatus {
  APPROVED
  DECLINED
  PENDING
}

enum vendorAvailability {
  YES
  NO
}
