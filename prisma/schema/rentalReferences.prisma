enum ReferenceStatus {
    PENDING
    COMPLETED
    DRAFT
    SUBMITTED
    APPROVED
    REJECTED
}

// Enums
enum EmploymentType {
  EMPLOYED
  SELF_EMPLOYED
  FREELANCE
  DIRECTOR
  SOLE_PROPRIETOR
}

model ExternalLandlord {
  id            String                  @id @default(cuid())
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  // Landlord Information
  name          String
  contactNumber String
  emailAddress  String

  //            Relationship
  referenceForm LandlordReferenceForm?

}
model LandlordReferenceForm {
  id                        String                   @id @default(cuid())
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt

  // Form metadata
  status                    ReferenceStatus          @default(PENDING)

  //                        Relationships
  TenancyReferenceHistoryId String                   @unique
  tenancyReferenceHistory   TenancyReferenceHistory @relation(fields: [TenancyReferenceHistoryId], references: [id])

  externalLandlordId        String                   @unique
  externalLandlord          ExternalLandlord        @relation(fields: [externalLandlordId], references: [id])

  conductId                 String                   @unique
  conduct                   TenantConduct           @relation(fields: [conductId], references: [id])

  // Additional Comments
  additionalComments        String?                  @db.Text

  // Signature Information
  signerName                String?
  signature                 String?
  signedDate                DateTime                 @default(now())

  // One-to-one relationship with application
  applicationId             String                   @unique
  application               application             @relation(fields: [applicationId], references: [id])
}

model TenancyReferenceHistory {
  id               String                  @id @default(cuid())
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  // Tenant Information
  tenantName       String
  currentAddress   String
  monthlyRent      String
  rentStartDate    DateTime?
  rentEndDate      DateTime?
  reasonForLeaving String?

  //               Relationship
  referenceForm    LandlordReferenceForm?
}

model TenantConduct {
  id                       String                  @id @default(cuid())
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt

  // Tenant Conduct & Payment History
  rentOnTime               Boolean?
  rentOnTimeDetails        String?                 @db.Text

  rentArrears              Boolean?
  rentArrearsDetails       String?                 @db.Text

  propertyCondition        Boolean?
  propertyConditionDetails String?                 @db.Text

  complaints               Boolean?
  complaintsDetails        String?                 @db.Text

  endCondition             Boolean?
  endConditionDetails      String?                 @db.Text

  rentAgain                Boolean?
  rentAgainDetails         String?                 @db.Text

  //                       Relationship
  referenceForm            LandlordReferenceForm?
}

//  guarantor agreement model
model GuarantorAgreement {
  id                      String                @id @default(cuid())
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  status                  String                @default("DRAFT")
  submittedAt             DateTime?
  // guarantor personal information for screening
  title                   String?
  firstName               String
  middleName              String?
  lastName                String
  dateOfBirth             DateTime
  nationalInsuranceNumber String?
  contactNumber           String
  emailAddress            String

  //                      relationships
  guarantor               guarantorInformation @relation(fields: [guarantorId], references: [id])
  guarantorId             String                    @unique
  guarantorEmployment     Json?
  // guarantorEmployment     GuarantorEmploymentInfo? @relation(fields: [guarantorEmploymentId], references: [id])
  // guarantorEmploymentId   String?               @unique
  documents               propertyDocument[]

  // Agreement details
  // agreementText           String                @db.Text
  signedByGuarantor       Boolean               @default(false)
  guarantorSignature      String?
  guarantorSignedAt       DateTime?
  // One-to-one relationship with application
  applicationId           String                @unique
  application             application          @relation(fields: [applicationId], references: [id])

}

// model GuarantorEmploymentInfo {
//   id                        String               @id @default(cuid())
//   employmentType            EmploymentType

//   // Common fields across employment types
//   annualIncome              Decimal?             @db.Decimal(10, 2)

//   // Employed specific fields
//   employerName              Json?
//   jobTitle                  String?
//   employmentStartDate       DateTime?
//   employerAddress           String?
//   employerPhone             String?
//   employerEmail             String?

//   // Self-employed specific fields
//   businessName              String?
//   businessNature            String?
//   businessYears             Int?
//   businessAddress           String?
//   accountantName            String?
//   accountantContact         String?
//   utrNumber                 String?

//   // Freelance specific fields
//   freelanceType             String?
//   freelanceYears            Int?
//   freelanceMonthlyIncome    Decimal?             @db.Decimal(10, 2)
//   freelancePortfolioWebsite String?
//   freelanceMajorClients     String?
//   freelanceUtrNumber        String?

//   // Director specific fields
//   companyName               String?
//   companyNumber             String?
//   position                  String?
//   directorIncome            String?
//   ownershipPercentage       Int?
//   companyFounded            Int?
//   companyAddress            String?

//   // Sole proprietor specific fields
//   businessNameSole          String?
//   businessNatureSole        String?
//   businessYearsSole         String?
//   annualIncomeSole          String?
//   businessAddressSole       String?
//   businessRegistration      String?
//   utrNumberSole             String?

//   //                        Relationship
//   guarantorAgreement        GuarantorAgreement?
// }

// Employee Information
model EmployeeReferenceForm {
  id                         String       @id @default(cuid())
  employeeName               String?
  jobTitle                   String?
  department                 String?
  employmentStartDate        DateTime?
  employmentEndDate          DateTime?
  reasonForLeaving           String?
  companyName                String?
  refereeName                String?
  refereePosition            String?
  contactNumber              String?
  emailAddress               String?
  employmentType             String?
  mainResponsibilities       String?
  workPerformance            Int?
  punctualityAttendance      Int?
  reliabilityProfessionalism Int?
  teamworkInterpersonal      Int?
  wouldReemploy              Boolean?
  reemployDetails            String?
  additionalComments         String?
  declarationConfirmed       Boolean      @default(true)
  signerName                 String?
  signature                  String?
  date                       DateTime?
  // One-to-one relationship with application
  applicationId              String       @unique
  application                application @relation(fields: [applicationId], references: [id])
}