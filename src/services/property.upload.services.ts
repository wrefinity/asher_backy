import stateServices from '../services/state.services';
import {
    AvailabilityStatus,
    AreaUnit,
    Currency,
    PriceFrequency,
    PropertySpecificationType,
    PropertyStatus,
    CancellationPolicy,
    LeaseTermUnit,
    BuildingClass,
    GlazingType,
    VatStatus,
    TensureType,
    GarageType,
} from '@prisma/client';
import { IBasePropertyDTO } from '../validations/interfaces/properties.interface';

class PropertyBulkUploadService {

    transformRowToDto = async (row: any, specificationType: PropertySpecificationType): Promise<IBasePropertyDTO> => {
        if (!row.state) new Error("Kindly supply the state")
        const state = await stateServices.getStateByName(row?.state)

        const baseDto = {
            stateId: state.id,
            name: row.name,
            description: row.description,
            shortDescription: row.shortDescription,
            propertySize: row.propertySize ? parseFloat(row.propertySize) : undefined,
            areaUnit: row.areaUnit as AreaUnit,
            yearBuilt: row.yearBuilt ? parseInt(row.yearBuilt) : undefined,
            city: row?.city,
            state: row?.state,
            country: row?.country,
            zipcode: row?.zipcode,
            address: row?.address,
            address2: row?.address2,
            latitude: row?.latitude ? parseFloat(row.latitude) : undefined,
            longitude: row?.longitude ? parseFloat(row.longitude) : undefined,
            currency: row?.currency as Currency,
            marketValue: row.marketValue ? parseFloat(row.marketValue) : undefined,
            price: parseFloat(row.price),
            securityDeposit: row.securityDeposit ? parseFloat(row.securityDeposit) : undefined,
            initialDeposit: row.initialDeposit ? parseFloat(row.initialDeposit) : undefined,
            priceFrequency: row.priceFrequency as PriceFrequency,
            rentalPeriod: row.rentalPeriod,
            specificationType: specificationType,
            propertySubType: row.propertySubType,
            availability: row.availability as AvailabilityStatus,
            businessRateVerified: row.businessRateVerified === 'true',
            postalCodeVerified: row.postalCodeVerified === 'true',
            landRegistryNumber: row.landRegistryNumber,
            vatStatus: row.vatStatus as VatStatus,
            keyFeatures: row.keyFeatures ? row.keyFeatures.split(';') : [],
            customKeyFeatures: row.customKeyFeatures ? row.customKeyFeatures.split(';') : [],
            nearbyAmenities: row.nearbyAmenities ? row.nearbyAmenities.split(';') : [],
            customNearbyAmenities: row.customNearbyAmenities ? row.customNearbyAmenities.split(';') : [],
            amenityDistances: row.amenityDistances ? JSON.parse(row.amenityDistances) : {},
            contactName: row.contactName,
            contactCompany: row.contactCompany,
            companyLogoUrl: row.companyLogoUrl,
            viewingArrangements: row.viewingArrangements,
            propertyDocument: row.propertyDocument ? JSON.parse(row.propertyDocument) : [],
            images: row.images ? JSON.parse(row.images) : [],
            videos: row.videos ? JSON.parse(row.videos) : [],
            virtualTours: row.virtualTours ? JSON.parse(row.virtualTours) : [],
            otherTypeSpecific: row.otherTypeSpecific ? JSON.parse(row.otherTypeSpecific) : undefined,

            // Type-specific properties
            residential: specificationType === PropertySpecificationType.RESIDENTIAL ? this.parseResidential(row) : undefined,
            commercial: specificationType === PropertySpecificationType.COMMERCIAL ? this.parseCommercial(row) : undefined,
            shortlet: specificationType === PropertySpecificationType.SHORTLET ? this.parseShortlet(row) : undefined
        };
        return baseDto;
    }

    private parseResidential(row: any) {
        return {
            status: row.status as PropertyStatus,
            bedrooms: parseInt(row.bedrooms),
            bathrooms: parseInt(row.bathrooms),
            receiptionRooms: parseInt(row.receiptionRooms),
            toilets: row.toilets ? parseInt(row.toilets) : undefined,
            tenure: row.tenure as TensureType,
            furnished: row.furnished === 'true',
            renovationYear: row.renovationYear,
            councilTaxBand: row.councilTaxBand,
            parkingSpaces: row.parkingSpaces ? parseInt(row.parkingSpaces) : 0,
            garageType: row.garageType as GarageType,
            yearBuilt: row.yearBuilt ? parseInt(row.yearBuilt) : undefined,
            floorLevel: row.floorLevel ? parseInt(row.floorLevel) : undefined,
            totalArea: row.totalArea,
            areaUnit: row.areaUnit as AreaUnit,
            petPolicy: row.petPolicy,
            rentalTerms: row.rentalTerms,
            utilities: row.utilities ? row.utilities.split(';') : [],
            garden: row.garden,
            gardenSize: row.gardenSize,
            houseStyle: row.houseStyle,
            numberOfStories: row.numberOfStories,
            outdoorsSpacesFeatures: row.outdoorsSpacesFeatures ? row.outdoorsSpacesFeatures.split(';') : [],
            buildingAmenityFeatures: row.buildingAmenityFeatures ? row.buildingAmenityFeatures.split(';') : [],
            safetyFeatures: row.safetyFeatures ? row.safetyFeatures.split(';') : [],
            roomDetails: row.roomDetails ? JSON.parse(row.roomDetails) : [],
            sharedFacilities: row.sharedFacilities ? JSON.parse(row.sharedFacilities) : undefined,
            otherSharedFacilities: row.otherSharedFacilities ? row.otherSharedFacilities.split(';') : [],
            houseRule: row.houseRule,
            maxOccupant: row.maxOccupant ? parseInt(row.maxOccupant) : undefined,
            isHMO: row.isHMO === 'true',
            isShareHouse: row.isShareHouse === 'true',
            isHMOLicenced: row.isHMOLicenced === 'true',
            hmoLicenceNumber: row.hmoLicenceNumber,
            hmoLicenceExpiryDate: row.hmoLicenceExpiryDate,
            totalOccupants: row.totalOccupants ? parseInt(row.totalOccupants) : undefined,
            occupantsDetails: row.occupantsDetails,
            unitConfiguration: row.unitConfiguration ? JSON.parse(row.unitConfiguration) : [],
            totalFloors: row.totalFloors ? parseInt(row.totalFloors) : undefined,
            unitPerFloors: row.unitPerFloors ? parseInt(row.unitPerFloors) : undefined,
            totalUnits: row.totalUnits ? parseInt(row.totalUnits) : undefined,
            customSafetyFeatures: row.customSafetyFeatures ? row.customSafetyFeatures.split(';') : [],
            epcRating: row.epcRating,
            energyEfficiencyRating: row.energyEfficiencyRating ? parseInt(row.energyEfficiencyRating) : undefined,
            environmentalImpactRating: row.environmentalImpactRating ? parseInt(row.environmentalImpactRating) : undefined,
            heatingTypes: row.heatingTypes ? row.heatingTypes.split(';') : [],
            coolingTypes: row.coolingTypes ? row.coolingTypes.split(';') : [],
            glazingTypes: row.glazingTypes as GlazingType,
            additionalNotes: row.additionalNotes,
            bills: row.bills ? row.bills.split(';') : [],
            PropertySpecification: row.PropertySpecification ? JSON.parse(row.PropertySpecification) : []
        };
    }

    private parseCommercial(row: any) {
        return {
            totalArea: row.totalArea,
            areaUnit: row?.areaUnit as AreaUnit,
            businessRates: row?.businessRates,
            serviceCharge: row.serviceCharge ? parseFloat(row.serviceCharge) : undefined,
            leaseTermUnit: row?.leaseTermUnit as LeaseTermUnit,
            minimumLeaseTerm: parseInt(row.minimumLeaseTerm),
            maximumLeaseTerm: row.maximumLeaseTerm ? parseInt(row.maximumLeaseTerm) : undefined,
            buildingClass: row.buildingClass as BuildingClass,
            lastRefurbished: row.lastRefurbished,
            totalFloors: row.totalFloors ? parseInt(row.totalFloors) : undefined,
            zoning: row.zoning,
            yearBuilt: row.yearBuilt ? parseInt(row.yearBuilt) : undefined,
            totalRooms: parseInt(row.totalRooms),
            parkingSpaces: row.parkingSpaces ? parseInt(row.parkingSpaces) : 0,
            floorLevel: row.floorLevel ? parseInt(row.floorLevel) : undefined,
            availableFrom: row.availableFrom,
            floorNumber: row.floorNumber ? parseInt(row.floorNumber) : undefined,
            workstations: row.workstations ? parseInt(row.workstations) : undefined,
            meetingRooms: row.meetingRooms ? parseInt(row.meetingRooms) : undefined,
            officeLayout: row.officeLayout,
            highRiseFloors: row.highRiseFloors ? parseInt(row.highRiseFloors) : undefined,
            floorAvailability: row.floorAvailability ? JSON.parse(row.floorAvailability) : [],
            securityFeatures: row.securityFeatures ? row.securityFeatures.split(';') : [],
            clearHeight: row.clearHeight,
            loadingDoorsCount: row.loadingDoorsCount ? parseInt(row.loadingDoorsCount) : undefined,
            powerSupply: row.powerSupply,
            floorLoad: row.floorLoad,
            columnSpacing: row.columnSpacing,
            hasYard: row.hasYard === 'true',
            yardDepth: row.yardDepth,
            safetyFeatures: row.safetyFeatures ? row.safetyFeatures.split(';') : [],
            customSafetyFeatures: row.customSafetyFeatures ? row.customSafetyFeatures.split(';') : [],
            epcRating: row.epcRating,
            energyEfficiencyRating: row.energyEfficiencyRating ? parseInt(row.energyEfficiencyRating) : undefined,
            environmentalImpactRating: row.environmentalImpactRating ? parseInt(row.environmentalImpactRating) : undefined,
            heatingTypes: row.heatingTypes ? row.heatingTypes.split(';') : [],
            coolingTypes: row.coolingTypes ? row.coolingTypes.split(';') : [],
            hasGreenCertification: row.hasGreenCertification === 'true',
            greenCertificationType: row.greenCertificationType,
            greenCertificationLevel: row.greenCertificationLevel,
            totalUnits: row.totalUnits ? parseInt(row.totalUnits) : undefined,
            unitConfigurations: row.unitConfigurations ? JSON.parse(row.unitConfigurations) : [],
            leaseTerm: row.leaseTerm,
            leaseTermNegotiable: row.leaseTermNegotiable !== 'false',
            rentReviewPeriod: row.rentReviewPeriod,
            breakClause: row.breakClause,
            rentFreeOffered: row.rentFreeOffered === 'true',
            rentFreePeriod: row.rentFreePeriod,
            suitableFor: row.suitableFor ? row.suitableFor.split(';') : [],
            roomDetails: row.roomDetails ? JSON.parse(row.roomDetails) : [],
            sharedFacilities: row.sharedFacilities ? JSON.parse(row.sharedFacilities) : undefined,
            otherSharedFacilities: row.otherSharedFacilities ? row.otherSharedFacilities.split(';') : [],
            houseRule: row.houseRule,
            maxOccupant: row.maxOccupant ? parseInt(row.maxOccupant) : undefined,
            isHMO: row.isHMO === 'true',
            isShareHouse: row.isShareHouse === 'true',
            isHMOLicenced: row.isHMOLicenced === 'true',
            hmoLicenceNumber: row.hmoLicenceNumber,
            hmoLicenceExpiryDate: row.hmoLicenceExpiryDate,
            totalOccupants: row.totalOccupants ? parseInt(row.totalOccupants) : undefined,
            occupantsDetails: row.occupantsDetails
        };
    }

    private parseShortlet(row: any) {
        return {
            lotSize: row.lotSize ? parseInt(row.lotSize) : undefined,
            garageSpaces: row.garageSpaces ? parseInt(row.garageSpaces) : undefined,
            outdoorsSpacesFeatures: row.outdoorsSpacesFeatures ? row.outdoorsSpacesFeatures.split(';') : [],
            buildingName: row?.buildingName,
            unitNumber: row?.unitNumber ? parseInt(row.unitNumber) : undefined,
            buildingAmenityFeatures: row.buildingAmenityFeatures ? row.buildingAmenityFeatures.split(';') : [],
            safetyFeatures: row.safetyFeatures ? row.safetyFeatures.split(';') : [],
            customSafetyFeatures: row.customSafetyFeatures ? row.customSafetyFeatures.split(';') : [],
            bedrooms: row.bedrooms ? parseInt(row?.bedrooms) : 0,
            beds: row.beds ? parseInt(row.beds) : undefined,
            bathrooms: parseInt(row.bathrooms),
            maxGuests: row.maxGuests ? parseInt(row.maxGuests) : undefined,
            propertySize: row.propertySize,
            sizeUnit: row.sizeUnit as AreaUnit,
            floorLevel: row?.floorLevel ? parseInt(row.floorLevel) : undefined,
            totalFloors: row?.totalFloors ? parseInt(row.totalFloors) : undefined,
            renovationYear: row?.renovationYear,
            yearBuilt: row.yearBuilt ? parseInt(row.yearBuilt) : undefined,
            furnished: row.furnished !== 'false',
            minStayDays: parseInt(row.minStayDays),
            maxStayDays: row?.maxStayDays ? parseInt(row.maxStayDays) : undefined,
            availableFrom: row?.availableFrom,
            availableTo: row?.availableTo,
            basePrice: parseFloat(row?.basePrice),
            cleaningFee: row?.cleaningFee ? parseFloat(row.cleaningFee) : undefined,
            weeklyDiscount: row?.weeklyDiscount ? parseFloat(row.weeklyDiscount) : undefined,
            monthlyDiscount: row?.monthlyDiscount ? parseFloat(row.monthlyDiscount) : undefined,
            checkInTime: row?.checkInTime,
            checkOutTime: row?.checkOutTime,
            instantBooking: row?.instantBooking === 'true',
            allowChildren: row?.allowChildren !== 'false',
            allowInfants: row?.allowInfants !== 'false',
            allowPets: row?.allowPets === 'true',
            allowSmoking: row?.allowSmoking === 'true',
            allowParties: row?.allowParties === 'true',
            quietHours: row?.quietHours === 'true',
            quietHoursStart: row?.quietHoursStart,
            quietHoursEnd: row?.quietHoursEnd,
            cancellationPolicy: row?.cancellationPolicy as CancellationPolicy,
            customCancellationPolicy: row?.customCancellationPolicy,
            houseManual: row?.houseManual,
            checkInInstructions: row?.checkInInstructions,
            localRecommendations: row?.localRecommendations,
            emergencyContact: row?.emergencyContact,
            hostName: row?.hostName,
            hostPhotoUrl: row?.hostPhotoUrl,
            responseRate: row?.responseRate ? parseInt(row.responseRate) : undefined,
            responseTime: row?.responseTime,
            isSuperhost: row?.isSuperhost === 'true',
            joinedDate: row?.joinedDate,
            roomDetails: row?.roomDetails ? JSON.parse(row.roomDetails) : [],
            sharedFacilities: row.sharedFacilities ? JSON.parse(row.sharedFacilities) : undefined,
            otherSharedFacilities: row?.otherSharedFacilities ? row.otherSharedFacilities.split(';') : [],
            houseRule: row?.houseRule,
            maxOccupant: row?.maxOccupant ? parseInt(row.maxOccupant) : undefined,
            isHMO: row?.isHMO === 'true',
            isShareHouse: row?.isShareHouse === 'true',
            isHMOLicenced: row?.isHMOLicenced === 'true',
            hmoLicenceNumber: row?.hmoLicenceNumber,
            hmoLicenceExpiryDate: row?.hmoLicenceExpiryDate,
            totalOccupants: row?.totalOccupants ? parseInt(row.totalOccupants) : undefined,
            occupantsDetails: row?.occupantsDetails,
            bookings: row.bookings ? JSON.parse(row.bookings) : [],
            seasonalPricing: row?.seasonalPricing ? JSON.parse(row.seasonalPricing) : [],
            unavailableDates: row?.unavailableDates ? row.unavailableDates.split(';') : [],
            additionalRules: row?.additionalRules ? row.additionalRules.split(';') : [],
            hostLanguages: row?.hostLanguages ? row.hostLanguages.split(';') : []
        };
    }
}

export default new PropertyBulkUploadService()